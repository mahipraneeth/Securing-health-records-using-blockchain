{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport factory from \"../ethereum/factory\";\nimport Layout from \"../components/Layout\";\nimport web3 from \"../ethereum/web3\";\nimport { Component } from \"react\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\n\nclass doctor extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      accounts: [],\n      items: []\n    });\n\n    _defineProperty(this, \"renderDoctors\", () => {\n      console.log(this.state.items);\n      return /*#__PURE__*/_jsx(Card.Group, {\n        itemsPerRow: 6,\n        items: this.state.items\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const accounts = await web3.eth.getAccounts();\n    const docs = await factory.methods.getDoctors().call({\n      from: accounts[0]\n    });\n    const items = [];\n\n    for (var i = 0; i < docs.length; i++) {\n      const eachRecord = await factory.methods.docs(docs[i]).call();\n      console.log(eachRecord);\n      items.push({\n        image: eachRecord.imageHash,\n        header: eachRecord.description,\n        description: eachRecord.speciality,\n        extra: /*#__PURE__*/_jsx(Link, {\n          route: `doctors/${eachRecord.doc}`,\n          children: /*#__PURE__*/_jsxs(\"a\", {\n            children: [/*#__PURE__*/_jsx(Icon, {\n              name: \"user\"\n            }), \"select\"]\n          })\n        })\n      });\n    }\n\n    this.setState({\n      items\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Select your doctors\"\n      }), this.renderDoctors()]\n    });\n  }\n\n}\n\nexport default doctor;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/doctors.js"],"names":["React","factory","Layout","web3","Component","Card","Icon","Image","Link","doctor","accounts","items","console","log","state","componentDidMount","eth","getAccounts","docs","methods","getDoctors","call","from","i","length","eachRecord","push","image","imageHash","header","description","speciality","extra","doc","setState","render","renderDoctors"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,QAAkC,mBAAlC;AACA,SAASC,IAAT,QAAqB,WAArB;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAAA;AAAA;;AAAA,mCACrB;AACNM,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,KAAK,EAAE;AAFD,KADqB;;AAAA,2CA6Bb,MAAM;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWH,KAAvB;AACA,0BAAO,KAAC,IAAD,CAAM,KAAN;AAAY,QAAA,WAAW,EAAE,CAAzB;AAA4B,QAAA,KAAK,EAAE,KAAKG,KAAL,CAAWH;AAA9C,QAAP;AACD,KAhC4B;AAAA;;AAK7B,QAAMI,iBAAN,GAA0B;AACxB,UAAML,QAAQ,GAAG,MAAMP,IAAI,CAACa,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMC,IAAI,GAAG,MAAMjB,OAAO,CAACkB,OAAR,CAAgBC,UAAhB,GAA6BC,IAA7B,CAAkC;AAAEC,MAAAA,IAAI,EAAEZ,QAAQ,CAAC,CAAD;AAAhB,KAAlC,CAAnB;AACA,UAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAME,UAAU,GAAG,MAAMxB,OAAO,CAACkB,OAAR,CAAgBD,IAAhB,CAAqBA,IAAI,CAACK,CAAD,CAAzB,EAA8BF,IAA9B,EAAzB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYY,UAAZ;AACAd,MAAAA,KAAK,CAACe,IAAN,CAAW;AACTC,QAAAA,KAAK,EAAEF,UAAU,CAACG,SADT;AAETC,QAAAA,MAAM,EAAEJ,UAAU,CAACK,WAFV;AAGTA,QAAAA,WAAW,EAAEL,UAAU,CAACM,UAHf;AAITC,QAAAA,KAAK,eACH,KAAC,IAAD;AAAM,UAAA,KAAK,EAAG,WAAUP,UAAU,CAACQ,GAAI,EAAvC;AAAA,iCACE;AAAA,oCACE,KAAC,IAAD;AAAM,cAAA,IAAI,EAAC;AAAX,cADF;AAAA;AADF;AALO,OAAX;AAaD;;AAED,SAAKC,QAAL,CAAc;AAAEvB,MAAAA;AAAF,KAAd;AACD;;AAKDwB,EAAAA,MAAM,GAAG;AACP,wBACE,MAAC,MAAD;AAAA,8BACE;AAAA;AAAA,QADF,EAEG,KAAKC,aAAL,EAFH;AAAA,MADF;AAMD;;AAxC4B;;AA2C/B,eAAe3B,MAAf","sourcesContent":["import React from \"react\";\r\nimport factory from \"../ethereum/factory\";\r\nimport Layout from \"../components/Layout\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Component } from \"react\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"../routes\";\r\n\r\nclass doctor extends Component {\r\n  state = {\r\n    accounts: [],\r\n    items: [],\r\n  };\r\n  async componentDidMount() {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const docs = await factory.methods.getDoctors().call({ from: accounts[0] });\r\n    const items = [];\r\n    for (var i = 0; i < docs.length; i++) {\r\n      const eachRecord = await factory.methods.docs(docs[i]).call();\r\n      console.log(eachRecord);\r\n      items.push({\r\n        image: eachRecord.imageHash,\r\n        header: eachRecord.description,\r\n        description: eachRecord.speciality,\r\n        extra: (\r\n          <Link route={`doctors/${eachRecord.doc}`}>\r\n            <a>\r\n              <Icon name=\"user\" />\r\n              select\r\n            </a>\r\n          </Link>\r\n        ),\r\n      });\r\n    }\r\n\r\n    this.setState({ items });\r\n  }\r\n  renderDoctors = () => {\r\n    console.log(this.state.items);\r\n    return <Card.Group itemsPerRow={6} items={this.state.items} />;\r\n  };\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>Select your doctors</h3>\r\n        {this.renderDoctors()}\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default doctor;\r\n"]},"metadata":{},"sourceType":"module"}