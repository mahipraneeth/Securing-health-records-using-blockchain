{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport record from \"../../ethereum/record\";\nimport web3 from \"../../ethereum/web3\";\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nclass addRecord extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      accounts: [],\n      reportBuffer: null,\n      prescriptionBuffer: null,\n      recordInstance: null,\n      loading: false,\n      message: \"\",\n      errorMessage: \"\"\n    });\n\n    _defineProperty(this, \"captureReport\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          reportBuffer: Buffer(reader.result)\n        });\n        console.log(\"buffer\", this.state.reportBuffer);\n      };\n    });\n\n    _defineProperty(this, \"capturePrescription\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          prescriptionBuffer: Buffer(reader.result)\n        });\n        console.log(\"buffer\", this.state.prescriptionBuffer);\n      };\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        message: \"Your files are being added to ipfs\",\n        errorMessage: \"\"\n      });\n\n      try {\n        let resultPrescription = null;\n        let resultReport = null;\n        if (this.state.prescriptionBuffer != null) resultPrescription = await ipfs.add(this.state.prescriptionBuffer);\n        if (this.state.reportBuffer != null) resultReport = await ipfs.add(this.state.reportBuffer);\n        this.setState({\n          message: \"added your files pushing to blockchain\"\n        });\n        if (resultPrescription == null) resultPrescription.path = \"\";\n        if (resultReport == null) resultReport.path = \"\";\n      } catch (error) {\n        this.setState({\n          errorMessage: error.message\n        });\n      }\n    });\n  }\n\n  static getInitialProps(props) {\n    const address = props.query.address;\n    const docaddress = props.query.docaddress;\n    return {\n      address,\n      docaddress\n    };\n  }\n\n  async componentDidMount() {\n    const accounts = await web3.eth.getAccounts();\n    const recordInstance = record(this.props.address);\n    this.setState({\n      accounts,\n      recordInstance\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"add files\"\n      }), /*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(Form.Input, {\n          type: \"file\",\n          label: \"prescription(if any)\",\n          onChange: this.capturePrescription\n        }), /*#__PURE__*/_jsx(Form.Input, {\n          type: \"file\",\n          label: \"report(if any)\",\n          onChange: this.captureReport\n        }), /*#__PURE__*/_jsx(Button, {\n          primary: true,\n          loading: this.state.loading,\n          children: \"Submit\"\n        })]\n      })]\n    });\n  }\n\n}\n\nexport default addRecord;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/Records/add.js"],"names":["React","Component","Button","Form","Layout","record","web3","ipfsClient","require","ipfs","host","port","protocol","addRecord","accounts","reportBuffer","prescriptionBuffer","recordInstance","loading","message","errorMessage","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","state","resultPrescription","resultReport","add","path","error","getInitialProps","props","address","query","docaddress","componentDidMount","eth","getAccounts","render","capturePrescription","captureReport"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport record from \"../../ethereum/record\";\r\nimport web3 from \"../../ethereum/web3\";\r\n\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\n\r\nclass addRecord extends Component {\r\n  state = {\r\n    accounts: [],\r\n    reportBuffer: null,\r\n    prescriptionBuffer: null,\r\n    recordInstance: null,\r\n    loading: false,\r\n    message: \"\",\r\n    errorMessage: \"\",\r\n  };\r\n  static getInitialProps(props) {\r\n    const address = props.query.address;\r\n    const docaddress = props.query.docaddress;\r\n    return { address, docaddress };\r\n  }\r\n  captureReport = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ reportBuffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.reportBuffer);\r\n    };\r\n  };\r\n  capturePrescription = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ prescriptionBuffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.prescriptionBuffer);\r\n    };\r\n  };\r\n  async componentDidMount() {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const recordInstance = record(this.props.address);\r\n    this.setState({ accounts, recordInstance });\r\n  }\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      loading: true,\r\n      message: \"Your files are being added to ipfs\",\r\n      errorMessage: \"\",\r\n    });\r\n    try {\r\n      let resultPrescription = null;\r\n      let resultReport = null;\r\n      if (this.state.prescriptionBuffer != null)\r\n        resultPrescription = await ipfs.add(this.state.prescriptionBuffer);\r\n      if (this.state.reportBuffer != null)\r\n        resultReport = await ipfs.add(this.state.reportBuffer);\r\n      this.setState({ message: \"added your files pushing to blockchain\" });\r\n      if (resultPrescription == null) resultPrescription.path = \"\";\r\n      if (resultReport == null) resultReport.path = \"\";\r\n    } catch (error) {\r\n      this.setState({ errorMessage: error.message });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>add files</h3>\r\n        <Form>\r\n          <Form.Input\r\n            type=\"file\"\r\n            label=\"prescription(if any)\"\r\n            onChange={this.capturePrescription}\r\n          />\r\n          <Form.Input\r\n            type=\"file\"\r\n            label=\"report(if any)\"\r\n            onChange={this.captureReport}\r\n          />\r\n          <Button primary loading={this.state.loading}>\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default addRecord;\r\n"]},"metadata":{},"sourceType":"module"}