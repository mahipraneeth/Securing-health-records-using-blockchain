{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport factory from \"../ethereum/factory\";\nimport Layout from \"../components/Layout\";\nimport web3 from \"../ethereum/web3\";\nimport { Component } from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\n\nvar doctor = /*#__PURE__*/function (_Component) {\n  _inherits(doctor, _Component);\n\n  var _super = _createSuper(doctor);\n\n  function doctor() {\n    _classCallCheck(this, doctor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(doctor, [{\n    key: \"renderCard\",\n    value: function renderCard(image, name, speciality, address) {\n      return /*#__PURE__*/_jsxs(Card, {\n        children: [/*#__PURE__*/_jsx(Image, {\n          src: image,\n          wrapped: true,\n          ui: false\n        }), /*#__PURE__*/_jsxs(Card.Content, {\n          children: [/*#__PURE__*/_jsx(Card.Header, {\n            children: name\n          }), /*#__PURE__*/_jsx(Card.Description, {\n            children: speciality\n          })]\n        }), /*#__PURE__*/_jsx(Card.Content, {\n          children: /*#__PURE__*/_jsxs(Link, {\n            route: \"/doctors/\".concat(address),\n            children: [/*#__PURE__*/_jsx(Icon, {\n              name: \"user\"\n            }), /*#__PURE__*/_jsx(\"a\", {\n              children: \"select\"\n            })]\n          })\n        })]\n      });\n    }\n  }, {\n    key: \"renderDoctors\",\n    value: function () {\n      var _renderDoctors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var items, accounts, docs, i, eachDoctor;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                items = [];\n                _context.next = 3;\n                return web3.ethereum.enable();\n\n              case 3:\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                _context.next = 8;\n                return factory.methods.getDoctors().call({\n                  from: accounts[0]\n                });\n\n              case 8:\n                docs = _context.sent;\n                console.log(docs);\n                i = 0;\n\n              case 11:\n                if (!(i < docs.length)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 14;\n                return factory.methods.docs(docs[i]).call({\n                  from: accounts[0]\n                });\n\n              case 14:\n                eachDoctor = _context.sent;\n                items.push(this.renderCard(eachDoctor.imageHash, eachDoctor.description, eachDoctor.speciality, eachDoctor.doc));\n\n              case 16:\n                i++;\n                _context.next = 11;\n                break;\n\n              case 19:\n                return _context.abrupt(\"return\", items);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function renderDoctors() {\n        return _renderDoctors.apply(this, arguments);\n      }\n\n      return renderDoctors;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxs(Layout, {\n        children: [/*#__PURE__*/_jsx(\"h3\", {\n          children: \"Select your doctors\"\n        }), /*#__PURE__*/_jsx(Card.Group, {\n          children: this.renderDoctors()\n        })]\n      });\n    }\n  }]);\n\n  return doctor;\n}(Component);\n\nexport default doctor;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/doctors.js"],"names":["factory","Layout","web3","Component","Card","Icon","Link","doctor","image","name","speciality","address","items","ethereum","enable","eth","getAccounts","accounts","methods","getDoctors","call","from","docs","console","log","i","length","eachDoctor","push","renderCard","imageHash","description","doc","renderDoctors"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,SAASC,IAAT,QAAqB,WAArB;;IAEMC,M;;;;;;;;;;;;;+BACOC,K,EAAOC,I,EAAMC,U,EAAYC,O,EAAS;AAC3C,0BACE,MAAC,IAAD;AAAA,gCACE,KAAC,KAAD;AAAO,UAAA,GAAG,EAAEH,KAAZ;AAAmB,UAAA,OAAO,MAA1B;AAA2B,UAAA,EAAE,EAAE;AAA/B,UADF,eAEE,MAAC,IAAD,CAAM,OAAN;AAAA,kCACE,KAAC,IAAD,CAAM,MAAN;AAAA,sBAAcC;AAAd,YADF,eAEE,KAAC,IAAD,CAAM,WAAN;AAAA,sBAAmBC;AAAnB,YAFF;AAAA,UAFF,eAME,KAAC,IAAD,CAAM,OAAN;AAAA,iCACE,MAAC,IAAD;AAAM,YAAA,KAAK,qBAAcC,OAAd,CAAX;AAAA,oCACE,KAAC,IAAD;AAAM,cAAA,IAAI,EAAC;AAAX,cADF,eAEE;AAAA;AAAA,cAFF;AAAA;AADF,UANF;AAAA,QADF;AAeD;;;;;;;;;;AAEOC,gBAAAA,K,GAAQ,E;;uBACRV,IAAI,CAACW,QAAL,CAAcC,MAAd,E;;;;uBACiBZ,IAAI,CAACa,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;;uBACajB,OAAO,CAACkB,OAAR,CAAgBC,UAAhB,GAA6BC,IAA7B,CAAkC;AAAEC,kBAAAA,IAAI,EAAEJ,QAAQ,CAAC,CAAD;AAAhB,iBAAlC,C;;;AAAbK,gBAAAA,I;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACSG,gBAAAA,C,GAAI,C;;;sBAAGA,CAAC,GAAGH,IAAI,CAACI,M;;;;;;uBACE1B,OAAO,CAACkB,OAAR,CACtBI,IADsB,CACjBA,IAAI,CAACG,CAAD,CADa,EAEtBL,IAFsB,CAEjB;AAAEC,kBAAAA,IAAI,EAAEJ,QAAQ,CAAC,CAAD;AAAhB,iBAFiB,C;;;AAAnBU,gBAAAA,U;AAGNf,gBAAAA,KAAK,CAACgB,IAAN,CACE,KAAKC,UAAL,CACEF,UAAU,CAACG,SADb,EAEEH,UAAU,CAACI,WAFb,EAGEJ,UAAU,CAACjB,UAHb,EAIEiB,UAAU,CAACK,GAJb,CADF;;;AAJ+BP,gBAAAA,CAAC,E;;;;;iDAa3Bb,K;;;;;;;;;;;;;;;;;;6BAEA;AACP,0BACE,MAAC,MAAD;AAAA,gCACE;AAAA;AAAA,UADF,eAEE,KAAC,IAAD,CAAM,KAAN;AAAA,oBAAa,KAAKqB,aAAL;AAAb,UAFF;AAAA,QADF;AAMD;;;;EA9CkB9B,S;;AAiDrB,eAAeI,MAAf","sourcesContent":["import factory from \"../ethereum/factory\";\r\nimport Layout from \"../components/Layout\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Component } from \"react\";\r\nimport { Card, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"../routes\";\r\n\r\nclass doctor extends Component {\r\n  renderCard(image, name, speciality, address) {\r\n    return (\r\n      <Card>\r\n        <Image src={image} wrapped ui={false} />\r\n        <Card.Content>\r\n          <Card.Header>{name}</Card.Header>\r\n          <Card.Description>{speciality}</Card.Description>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <Link route={`/doctors/${address}`}>\r\n            <Icon name=\"user\" />\r\n            <a>select</a>\r\n          </Link>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n  async renderDoctors() {\r\n    const items = [];\r\n    await web3.ethereum.enable();\r\n    const accounts = await web3.eth.getAccounts();\r\n    const docs = await factory.methods.getDoctors().call({ from: accounts[0] });\r\n    console.log(docs);\r\n    for (var i = 0; i < docs.length; i++) {\r\n      const eachDoctor = await factory.methods\r\n        .docs(docs[i])\r\n        .call({ from: accounts[0] });\r\n      items.push(\r\n        this.renderCard(\r\n          eachDoctor.imageHash,\r\n          eachDoctor.description,\r\n          eachDoctor.speciality,\r\n          eachDoctor.doc\r\n        )\r\n      );\r\n    }\r\n    return items;\r\n  }\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>Select your doctors</h3>\r\n        <Card.Group>{this.renderDoctors()}</Card.Group>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default doctor;\r\n"]},"metadata":{},"sourceType":"module"}