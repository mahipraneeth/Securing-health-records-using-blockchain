{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport factory from \"../ethereum/factory\";\nimport Layout from \"../components/Layout\";\nimport web3 from \"../ethereum/web3\";\nimport { Component } from \"react\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\n\nclass doctor extends Component {\n  renderDoctors() {\n    const items = [{\n      header: \"Project Report - April\",\n      description: \"Leverage agile frameworks to provide a robust synopsis for high level overviews.\",\n      meta: \"ROI: 30%\"\n    }, {\n      header: \"Project Report - May\",\n      description: \"Bring to the table win-win survival strategies to ensure proactive domination.\",\n      meta: \"ROI: 34%\"\n    }, {\n      header: \"Project Report - June\",\n      description: \"Capitalise on low hanging fruit to identify a ballpark value added activity to beta test.\",\n      meta: \"ROI: 27%\"\n    }];\n    /*\r\n    await web3.ethereum.enable();\r\n    const accounts = await web3.eth.getAccounts();\r\n    const docs = await factory.methods.getDoctors().call({ from: accounts[0] });\r\n      items = docs.map(async (address) => {\r\n      \r\n      const eachDoctor = await factory.methods\r\n        .docs(address)\r\n        .call({ from: accounts[0] });\r\n        \r\n        return {\r\n        image: \"\",\r\n        header: address,\r\n      };\r\n    });\r\n    */\n\n    return /*#__PURE__*/_jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Select your doctors\"\n      }), this.renderDoctors()]\n    });\n  }\n\n}\n\nexport default doctor;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/doctors.js"],"names":["factory","Layout","web3","Component","Card","Icon","Image","Link","doctor","renderDoctors","items","header","description","meta","render"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,QAAkC,mBAAlC;AACA,SAASC,IAAT,QAAqB,WAArB;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAC7BM,EAAAA,aAAa,GAAG;AACd,UAAMC,KAAK,GAAG,CACZ;AACEC,MAAAA,MAAM,EAAE,wBADV;AAEEC,MAAAA,WAAW,EACT,kFAHJ;AAIEC,MAAAA,IAAI,EAAE;AAJR,KADY,EAOZ;AACEF,MAAAA,MAAM,EAAE,sBADV;AAEEC,MAAAA,WAAW,EACT,gFAHJ;AAIEC,MAAAA,IAAI,EAAE;AAJR,KAPY,EAaZ;AACEF,MAAAA,MAAM,EAAE,uBADV;AAEEC,MAAAA,WAAW,EACT,2FAHJ;AAIEC,MAAAA,IAAI,EAAE;AAJR,KAbY,CAAd;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI,wBAAO,KAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEH;AAAnB,MAAP;AACD;;AACDI,EAAAA,MAAM,GAAG;AACP,wBACE,MAAC,MAAD;AAAA,8BACE;AAAA;AAAA,QADF,EAEG,KAAKL,aAAL,EAFH;AAAA,MADF;AAMD;;AAjD4B;;AAoD/B,eAAeD,MAAf","sourcesContent":["import factory from \"../ethereum/factory\";\r\nimport Layout from \"../components/Layout\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Component } from \"react\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"../routes\";\r\n\r\nclass doctor extends Component {\r\n  renderDoctors() {\r\n    const items = [\r\n      {\r\n        header: \"Project Report - April\",\r\n        description:\r\n          \"Leverage agile frameworks to provide a robust synopsis for high level overviews.\",\r\n        meta: \"ROI: 30%\",\r\n      },\r\n      {\r\n        header: \"Project Report - May\",\r\n        description:\r\n          \"Bring to the table win-win survival strategies to ensure proactive domination.\",\r\n        meta: \"ROI: 34%\",\r\n      },\r\n      {\r\n        header: \"Project Report - June\",\r\n        description:\r\n          \"Capitalise on low hanging fruit to identify a ballpark value added activity to beta test.\",\r\n        meta: \"ROI: 27%\",\r\n      },\r\n    ];\r\n    /*\r\n    await web3.ethereum.enable();\r\n    const accounts = await web3.eth.getAccounts();\r\n    const docs = await factory.methods.getDoctors().call({ from: accounts[0] });\r\n\r\n    items = docs.map(async (address) => {\r\n      \r\n      const eachDoctor = await factory.methods\r\n        .docs(address)\r\n        .call({ from: accounts[0] });\r\n        \r\n\r\n      return {\r\n        image: \"\",\r\n        header: address,\r\n      };\r\n    });\r\n    */\r\n    return <Card.Group items={items} />;\r\n  }\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>Select your doctors</h3>\r\n        {this.renderDoctors()}\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default doctor;\r\n"]},"metadata":{},"sourceType":"module"}