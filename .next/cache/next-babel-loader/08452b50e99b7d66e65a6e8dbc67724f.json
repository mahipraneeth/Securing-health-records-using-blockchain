{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar HDwalletprovider = require(\"truffle-hdwallet-provider\");\n\nvar Web3 = require(\"web3\");\n\nvar compiledFactory = require(\"../ethereum/build/RecordFactory.json\");\n\nvar provider = new HDwalletprovider(\"march box art maid curtain empty above security wave adapt yellow scout\", \"https://ropsten.infura.io/v3/2ae324fcb0d94486b6b022f559475dc7\");\nvar web3 = new Web3(provider);\n\nvar deploy = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var accounts, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.getAccounts();\n\n          case 2:\n            accounts = _context.sent;\n            console.log(\"attempting to deploy from account\", accounts[0]);\n            _context.next = 6;\n            return new web3.eth.Contract(JSON.parse(compiledFactory[\"interface\"])).deploy({\n              data: compiledFactory.bytecode,\n              arguments: []\n            }).send({\n              gas: \"1000000\",\n              from: accounts[0]\n            });\n\n          case 6:\n            result = _context.sent;\n            console.log(\"contract deployed to\", result.options.address);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function deploy() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\ndeploy(); //contract address 0x29d621036a3337C85e97a792E2D3CD4689D3813f","map":{"version":3,"sources":["F:/Securing health records using blockchain/ethereum/deploy.js"],"names":["HDwalletprovider","require","Web3","compiledFactory","provider","web3","deploy","eth","getAccounts","accounts","console","log","Contract","JSON","parse","data","bytecode","arguments","send","gas","from","result","options","address"],"mappings":";;;;AAAA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,2BAAD,CAAhC;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,sCAAD,CAA/B;;AAEA,IAAMG,QAAQ,GAAG,IAAIJ,gBAAJ,CACf,yEADe,EAEf,+DAFe,CAAjB;AAKA,IAAMK,IAAI,GAAG,IAAIH,IAAJ,CAASE,QAAT,CAAb;;AAEA,IAAME,MAAM;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACUD,IAAI,CAACE,GAAL,CAASC,WAAT,EADV;;AAAA;AACPC,YAAAA,QADO;AAEbC,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,QAAQ,CAAC,CAAD,CAAzD;AAFa;AAAA,mBAGQ,IAAIJ,IAAI,CAACE,GAAL,CAASK,QAAb,CACnBC,IAAI,CAACC,KAAL,CAAWX,eAAe,aAA1B,CADmB,EAGlBG,MAHkB,CAGX;AAAES,cAAAA,IAAI,EAAEZ,eAAe,CAACa,QAAxB;AAAkCC,cAAAA,SAAS,EAAE;AAA7C,aAHW,EAIlBC,IAJkB,CAIb;AAAEC,cAAAA,GAAG,EAAE,SAAP;AAAkBC,cAAAA,IAAI,EAAEX,QAAQ,CAAC,CAAD;AAAhC,aAJa,CAHR;;AAAA;AAGPY,YAAAA,MAHO;AASbX,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCU,MAAM,CAACC,OAAP,CAAeC,OAAnD;;AATa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANjB,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAWAA,MAAM,G,CAEN","sourcesContent":["const HDwalletprovider = require(\"truffle-hdwallet-provider\");\r\nconst Web3 = require(\"web3\");\r\nconst compiledFactory = require(\"../ethereum/build/RecordFactory.json\");\r\n\r\nconst provider = new HDwalletprovider(\r\n  \"march box art maid curtain empty above security wave adapt yellow scout\",\r\n  \"https://ropsten.infura.io/v3/2ae324fcb0d94486b6b022f559475dc7\"\r\n);\r\n\r\nconst web3 = new Web3(provider);\r\n\r\nconst deploy = async () => {\r\n  const accounts = await web3.eth.getAccounts();\r\n  console.log(\"attempting to deploy from account\", accounts[0]);\r\n  const result = await new web3.eth.Contract(\r\n    JSON.parse(compiledFactory.interface)\r\n  )\r\n    .deploy({ data: compiledFactory.bytecode, arguments: [] })\r\n    .send({ gas: \"1000000\", from: accounts[0] });\r\n\r\n  console.log(\"contract deployed to\", result.options.address);\r\n};\r\ndeploy();\r\n\r\n//contract address 0x29d621036a3337C85e97a792E2D3CD4689D3813f\r\n"]},"metadata":{},"sourceType":"script"}