{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport factory from \"../ethereum/factory\";\nimport Layout from \"../components/Layout\";\nimport web3 from \"../ethereum/web3\";\nimport { Component } from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\n\nclass doctor extends Component {\n  renderCard(image, name, speciality, address) {\n    return /*#__PURE__*/_jsxs(Card, {\n      children: [/*#__PURE__*/_jsx(Image, {\n        src: image,\n        wrapped: true,\n        ui: false\n      }), /*#__PURE__*/_jsxs(Card.Content, {\n        children: [/*#__PURE__*/_jsx(Card.Header, {\n          children: name\n        }), /*#__PURE__*/_jsx(Card.Description, {\n          children: speciality\n        })]\n      }), /*#__PURE__*/_jsx(Card.Content, {\n        children: /*#__PURE__*/_jsxs(Link, {\n          route: `/doctors/${address}`,\n          children: [/*#__PURE__*/_jsx(Icon, {\n            name: \"user\"\n          }), /*#__PURE__*/_jsx(\"a\", {\n            children: \"select\"\n          })]\n        })\n      })]\n    });\n  }\n\n  async renderDoctors() {\n    const items = [];\n    await web3.ethereum.enable();\n    const accounts = await web3.eth.getAccounts();\n    const docs = await factory.methods.getDoctors().call({\n      from: accounts[0]\n    });\n\n    for (var i = 0; i < docs.length; i++) {\n      const eachDoctor = await factory.methods.docs(docs[i]).call({\n        from: accounts[0]\n      });\n      items.push(this.renderCard(eachDoctor.imageHash, eachDoctor.description, eachDoctor.speciality, eachDoctor.doc));\n    }\n\n    return items;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Select your doctors\"\n      }), /*#__PURE__*/_jsx(Card.Group, {\n        children: this.renderDoctors\n      })]\n    });\n  }\n\n}\n\nexport default doctor;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/doctors.js"],"names":["factory","Layout","web3","Component","Card","Icon","Link","doctor","renderCard","image","name","speciality","address","renderDoctors","items","ethereum","enable","accounts","eth","getAccounts","docs","methods","getDoctors","call","from","i","length","eachDoctor","push","imageHash","description","doc","render"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,SAASC,IAAT,QAAqB,WAArB;;AAEA,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAC7BK,EAAAA,UAAU,CAACC,KAAD,EAAQC,IAAR,EAAcC,UAAd,EAA0BC,OAA1B,EAAmC;AAC3C,wBACE,MAAC,IAAD;AAAA,8BACE,KAAC,KAAD;AAAO,QAAA,GAAG,EAAEH,KAAZ;AAAmB,QAAA,OAAO,MAA1B;AAA2B,QAAA,EAAE,EAAE;AAA/B,QADF,eAEE,MAAC,IAAD,CAAM,OAAN;AAAA,gCACE,KAAC,IAAD,CAAM,MAAN;AAAA,oBAAcC;AAAd,UADF,eAEE,KAAC,IAAD,CAAM,WAAN;AAAA,oBAAmBC;AAAnB,UAFF;AAAA,QAFF,eAME,KAAC,IAAD,CAAM,OAAN;AAAA,+BACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAG,YAAWC,OAAQ,EAAjC;AAAA,kCACE,KAAC,IAAD;AAAM,YAAA,IAAI,EAAC;AAAX,YADF,eAEE;AAAA;AAAA,YAFF;AAAA;AADF,QANF;AAAA,MADF;AAeD;;AACD,QAAMC,aAAN,GAAsB;AACpB,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMZ,IAAI,CAACa,QAAL,CAAcC,MAAd,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAMf,IAAI,CAACgB,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMC,IAAI,GAAG,MAAMpB,OAAO,CAACqB,OAAR,CAAgBC,UAAhB,GAA6BC,IAA7B,CAAkC;AAAEC,MAAAA,IAAI,EAAEP,QAAQ,CAAC,CAAD;AAAhB,KAAlC,CAAnB;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAME,UAAU,GAAG,MAAM3B,OAAO,CAACqB,OAAR,CACtBD,IADsB,CACjBA,IAAI,CAACK,CAAD,CADa,EAEtBF,IAFsB,CAEjB;AAAEC,QAAAA,IAAI,EAAEP,QAAQ,CAAC,CAAD;AAAhB,OAFiB,CAAzB;AAGAH,MAAAA,KAAK,CAACc,IAAN,CACE,KAAKpB,UAAL,CACEmB,UAAU,CAACE,SADb,EAEEF,UAAU,CAACG,WAFb,EAGEH,UAAU,CAAChB,UAHb,EAIEgB,UAAU,CAACI,GAJb,CADF;AAQD;;AACD,WAAOjB,KAAP;AACD;;AACDkB,EAAAA,MAAM,GAAG;AACP,wBACE,MAAC,MAAD;AAAA,8BACE;AAAA;AAAA,QADF,eAEE,KAAC,IAAD,CAAM,KAAN;AAAA,kBAAa,KAAKnB;AAAlB,QAFF;AAAA,MADF;AAMD;;AA7C4B;;AAgD/B,eAAeN,MAAf","sourcesContent":["import factory from \"../ethereum/factory\";\r\nimport Layout from \"../components/Layout\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Component } from \"react\";\r\nimport { Card, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"../routes\";\r\n\r\nclass doctor extends Component {\r\n  renderCard(image, name, speciality, address) {\r\n    return (\r\n      <Card>\r\n        <Image src={image} wrapped ui={false} />\r\n        <Card.Content>\r\n          <Card.Header>{name}</Card.Header>\r\n          <Card.Description>{speciality}</Card.Description>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <Link route={`/doctors/${address}`}>\r\n            <Icon name=\"user\" />\r\n            <a>select</a>\r\n          </Link>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n  async renderDoctors() {\r\n    const items = [];\r\n    await web3.ethereum.enable();\r\n    const accounts = await web3.eth.getAccounts();\r\n    const docs = await factory.methods.getDoctors().call({ from: accounts[0] });\r\n    for (var i = 0; i < docs.length; i++) {\r\n      const eachDoctor = await factory.methods\r\n        .docs(docs[i])\r\n        .call({ from: accounts[0] });\r\n      items.push(\r\n        this.renderCard(\r\n          eachDoctor.imageHash,\r\n          eachDoctor.description,\r\n          eachDoctor.speciality,\r\n          eachDoctor.doc\r\n        )\r\n      );\r\n    }\r\n    return items;\r\n  }\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>Select your doctors</h3>\r\n        <Card.Group>{this.renderDoctors}</Card.Group>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default doctor;\r\n"]},"metadata":{},"sourceType":"module"}