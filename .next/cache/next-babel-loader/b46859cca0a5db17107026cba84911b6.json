{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\Securing health records using blockchain\\\\pages\\\\Records\\\\new.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createFactory } from \"react\";\nimport { Button, Form, Input } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport factory from \"../../ethereum/factory\";\nimport web3 from \"../../ethereum/web3\";\nimport healthrecord from \"../../ethereum/build/healthrecord.json\"; //ipfs requirements\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nclass newRecord extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: \"\",\n      buffer: null,\n      account: null\n    });\n\n    _defineProperty(this, \"captureFile\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log(\"buffer\", this.state.buffer);\n      };\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      ipfs.add(this.state.buffer, async (error, result) => {\n        if (error) console.error(error.message);else {\n          await factory.methods.createRecord().send({\n            from: this.state.account,\n            gas: \"1000000\"\n          });\n          const records = await factory.methods.getDeployedRecords().call({\n            from: this.state.account\n          });\n          const record = await web3.eth.Contract(JSON.parse());\n        }\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"enter your name\",\n            value: this.state.name,\n            onChange: event => {\n              this.setState({\n                name: event.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: this.captureFile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default newRecord;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/Records/new.js"],"names":["React","Component","createFactory","Button","Form","Input","Layout","factory","web3","healthrecord","ipfsClient","require","ipfs","host","port","protocol","newRecord","name","buffer","account","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","state","add","error","message","methods","createRecord","send","from","gas","records","getDeployedRecords","call","record","eth","Contract","JSON","parse","componentDidMount","accounts","getAccounts","render","onSubmit","value","captureFile"],"mappings":"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","sourcesContent":["import React, { Component, createFactory } from \"react\";\r\nimport { Button, Form, Input } from \"semantic-ui-react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport factory from \"../../ethereum/factory\";\r\nimport web3 from \"../../ethereum/web3\";\r\nimport healthrecord from \"../../ethereum/build/healthrecord.json\";\r\n//ipfs requirements\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\n\r\nclass newRecord extends Component {\r\n  state = {\r\n    name: \"\",\r\n    buffer: null,\r\n    account: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0] });\r\n  }\r\n  captureFile = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.buffer);\r\n    };\r\n  };\r\n\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    ipfs.add(this.state.buffer, async (error, result) => {\r\n      if (error) console.error(error.message);\r\n      else {\r\n        await factory.methods\r\n          .createRecord()\r\n          .send({ from: this.state.account, gas: \"1000000\" });\r\n        const records = await factory.methods\r\n          .getDeployedRecords()\r\n          .call({ from: this.state.account });\r\n        const record = await web3.eth.Contract(JSON.parse());\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Form onSubmit={this.onSubmit}>\r\n          <Form.Field>\r\n            <label>name</label>\r\n            <Input\r\n              placeholder=\"enter your name\"\r\n              value={this.state.name}\r\n              onChange={(event) => {\r\n                this.setState({ name: event.target.value });\r\n              }}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>files</label>\r\n            <input type=\"file\" onChange={this.captureFile} />\r\n          </Form.Field>\r\n          <Button type=\"submit\">submit</Button>\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default newRecord;\r\n"]},"metadata":{},"sourceType":"module"}