{"ast":null,"code":"const HDwalletprovider = require(\"truffle-hdwallet-provider\");\n\nconst Web3 = require(\"web3\");\n\nconst compiledFactory = require(\"../ethereum/build/RecordFactory.json\");\n\nconst provider = new HDwalletprovider(\"march box art maid curtain empty above security wave adapt yellow scout\", \"https://ropsten.infura.io/v3/2ae324fcb0d94486b6b022f559475dc7\");\nconst web3 = new Web3(provider);\n\nconst deploy = async () => {\n  const accounts = await web3.eth.getAccounts();\n  console.log(\"attempting to deploy from account\", accounts[0]);\n  const result = await new web3.eth.Contract(JSON.parse(compiledFactory.interface)).deploy({\n    data: compiledFactory.bytecode,\n    arguments: []\n  }).send({\n    gas: \"1000000\",\n    from: accounts[0]\n  });\n  console.log(\"contract deployed to\", result.options.address);\n};\n\ndeploy(); //contract address 0x29d621036a3337C85e97a792E2D3CD4689D3813f","map":{"version":3,"sources":["F:/Securing health records using blockchain/ethereum/deploy.js"],"names":["HDwalletprovider","require","Web3","compiledFactory","provider","web3","deploy","accounts","eth","getAccounts","console","log","result","Contract","JSON","parse","interface","data","bytecode","arguments","send","gas","from","options","address"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,2BAAD,CAAhC;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,sCAAD,CAA/B;;AAEA,MAAMG,QAAQ,GAAG,IAAIJ,gBAAJ,CACf,yEADe,EAEf,+DAFe,CAAjB;AAKA,MAAMK,IAAI,GAAG,IAAIH,IAAJ,CAASE,QAAT,CAAb;;AAEA,MAAME,MAAM,GAAG,YAAY;AACzB,QAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDJ,QAAQ,CAAC,CAAD,CAAzD;AACA,QAAMK,MAAM,GAAG,MAAM,IAAIP,IAAI,CAACG,GAAL,CAASK,QAAb,CACnBC,IAAI,CAACC,KAAL,CAAWZ,eAAe,CAACa,SAA3B,CADmB,EAGlBV,MAHkB,CAGX;AAAEW,IAAAA,IAAI,EAAEd,eAAe,CAACe,QAAxB;AAAkCC,IAAAA,SAAS,EAAE;AAA7C,GAHW,EAIlBC,IAJkB,CAIb;AAAEC,IAAAA,GAAG,EAAE,SAAP;AAAkBC,IAAAA,IAAI,EAAEf,QAAQ,CAAC,CAAD;AAAhC,GAJa,CAArB;AAMAG,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,MAAM,CAACW,OAAP,CAAeC,OAAnD;AACD,CAVD;;AAWAlB,MAAM,G,CAEN","sourcesContent":["const HDwalletprovider = require(\"truffle-hdwallet-provider\");\r\nconst Web3 = require(\"web3\");\r\nconst compiledFactory = require(\"../ethereum/build/RecordFactory.json\");\r\n\r\nconst provider = new HDwalletprovider(\r\n  \"march box art maid curtain empty above security wave adapt yellow scout\",\r\n  \"https://ropsten.infura.io/v3/2ae324fcb0d94486b6b022f559475dc7\"\r\n);\r\n\r\nconst web3 = new Web3(provider);\r\n\r\nconst deploy = async () => {\r\n  const accounts = await web3.eth.getAccounts();\r\n  console.log(\"attempting to deploy from account\", accounts[0]);\r\n  const result = await new web3.eth.Contract(\r\n    JSON.parse(compiledFactory.interface)\r\n  )\r\n    .deploy({ data: compiledFactory.bytecode, arguments: [] })\r\n    .send({ gas: \"1000000\", from: accounts[0] });\r\n\r\n  console.log(\"contract deployed to\", result.options.address);\r\n};\r\ndeploy();\r\n\r\n//contract address 0x29d621036a3337C85e97a792E2D3CD4689D3813f\r\n"]},"metadata":{},"sourceType":"script"}