{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createFactory } from \"react\";\nimport { Button, Form, Input, Message } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport factory from \"../../ethereum/factory\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\"; //ipfs requirements\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\nconst options = [{\n  key: \"m\",\n  text: \"Male\",\n  value: \"male\"\n}, {\n  key: \"f\",\n  text: \"Female\",\n  value: \"female\"\n}, {\n  key: \"o\",\n  text: \"Other\",\n  value: \"other\"\n}];\n\nclass newRecord extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: \"\",\n      bufferReport: null,\n      bufferPrescription: null,\n      account: null,\n      errorMessage: \"\",\n      loading: false,\n      age: \"\",\n      gender: \"\",\n      height: \"\",\n      weight: \"\",\n      imageHash: \"\",\n      doctorAddress: this.props.doctor,\n      message: \"\",\n      visible: true\n    });\n\n    _defineProperty(this, \"captureFilePrescription\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          bufferPrescription: Buffer(reader.result)\n        });\n        console.log(\"bufferPrescription\", this.state.bufferPrescription);\n      };\n    });\n\n    _defineProperty(this, \"captureFileReport\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          bufferReport: Buffer(reader.result)\n        });\n        console.log(\"bufferReport\", this.state.bufferReport);\n      };\n    });\n\n    _defineProperty(this, \"captureFileImage\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          imageHash: Buffer(reader.result)\n        });\n        console.log(\"imageHash\", this.state.imageHash);\n      };\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const {\n        name,\n        age,\n        gender,\n        height,\n        weight,\n        doctorAddress\n      } = this.state;\n      this.setState({\n        loading: true,\n        visible: false,\n        message: \"your files are being uploaded to ipfs\",\n        errorMessage: \"\"\n      });\n\n      try {\n        let resultPrescriptionLink = \"\";\n\n        if (this.state.bufferPrescription != null) {\n          const resultPrescription = await ipfs.add(this.state.bufferPrescription);\n          resultPrescriptionLink = \"https://ipfs.infura.io/ipfs/\" + resultPrescription.path;\n        }\n\n        let resultReportLink = \"\";\n\n        if (this.state.bufferReport != null) {\n          const resultReport = await ipfs.add(this.state.bufferReport);\n          resultReportLink = \"https://ipfs.infura.io/ipfs/\" + resultReport.path;\n        }\n\n        const imageHash = await ipfs.add(this.state.imageHash);\n        this.setState({\n          message: \"added your files, creating your record\"\n        });\n        await factory.methods.createRecord(name, age, gender, height, weight, doctorAddress, resultPrescriptionLink, resultReportLink, \"https://ipfs.infura.io/ipfs/\" + imageHash.path).send({\n          from: this.state.account\n        });\n        Router.pushRoute(\"/all\");\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  static getInitialProps(props) {\n    return {\n      doctor: props.query.address\n    };\n  }\n\n  async componentDidMount() {\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(Layout, {\n      children: /*#__PURE__*/_jsxs(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage,\n        children: [/*#__PURE__*/_jsxs(Form.Group, {\n          widths: \"equal\",\n          children: [/*#__PURE__*/_jsx(Form.Input, {\n            label: \"name\",\n            placeholder: \"name\",\n            onChange: (event, {\n              value\n            }) => {\n              this.setState({\n                name: value\n              });\n            }\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            label: \"age\",\n            placeholder: \"age\",\n            onChange: (e, {\n              value\n            }) => {\n              this.setState({\n                age: value\n              });\n            }\n          }), /*#__PURE__*/_jsx(Form.Select, {\n            label: \"gender\",\n            placeholder: \"gender\",\n            options: options,\n            onChange: (event, {\n              value\n            }) => {\n              this.setState({\n                gender: value\n              });\n            }\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Group, {\n          widths: \"equal\",\n          children: [/*#__PURE__*/_jsx(Form.Input, {\n            label: \"height\",\n            placeholder: \"height\",\n            onChange: (event, {\n              value\n            }) => {\n              this.setState({\n                height: value\n              });\n            }\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            label: \"weight\",\n            placeholder: \"weight\",\n            onChange: (e, {\n              value\n            }) => {\n              this.setState({\n                weight: value\n              });\n            }\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            label: \"Profile Image\",\n            type: \"file\",\n            onChange: this.captureFileImage\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"prescriptions(if any previous prescriptions)\"\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            type: \"file\",\n            onChange: this.captureFilePrescription\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"reports(if any previous reports)\"\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            type: \"file\",\n            onChange: this.captureFileReport\n          })]\n        }), /*#__PURE__*/_jsx(Message, {\n          error: true,\n          header: \"Oops!!\",\n          content: this.state.errorMessage\n        }), /*#__PURE__*/_jsx(Message, {\n          info: true,\n          header: \"Please wait It may take two minutes!!\",\n          content: this.state.message,\n          hidden: this.state.visible\n        }), /*#__PURE__*/_jsx(Button, {\n          loading: this.state.loading,\n          primary: true,\n          type: \"submit\",\n          children: \"Create\"\n        })]\n      })\n    });\n  }\n\n}\n\nexport default newRecord;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/Records/new.js"],"names":["React","Component","createFactory","Button","Form","Input","Message","Layout","factory","web3","Router","ipfsClient","require","ipfs","host","port","protocol","options","key","text","value","newRecord","name","bufferReport","bufferPrescription","account","errorMessage","loading","age","gender","height","weight","imageHash","doctorAddress","props","doctor","message","visible","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","state","resultPrescriptionLink","resultPrescription","add","path","resultReportLink","resultReport","methods","createRecord","send","from","pushRoute","err","getInitialProps","query","address","componentDidMount","accounts","eth","getAccounts","render","onSubmit","e","captureFileImage","captureFilePrescription","captureFileReport"],"mappings":"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","sourcesContent":["import React, { Component, createFactory } from \"react\";\r\nimport { Button, Form, Input, Message } from \"semantic-ui-react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport factory from \"../../ethereum/factory\";\r\nimport web3 from \"../../ethereum/web3\";\r\n\r\nimport { Router } from \"../../routes\";\r\n\r\n//ipfs requirements\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\nconst options = [\r\n  { key: \"m\", text: \"Male\", value: \"male\" },\r\n  { key: \"f\", text: \"Female\", value: \"female\" },\r\n  { key: \"o\", text: \"Other\", value: \"other\" },\r\n];\r\nclass newRecord extends Component {\r\n  state = {\r\n    name: \"\",\r\n    bufferReport: null,\r\n    bufferPrescription: null,\r\n    account: null,\r\n    errorMessage: \"\",\r\n    loading: false,\r\n    age: \"\",\r\n    gender: \"\",\r\n    height: \"\",\r\n    weight: \"\",\r\n    imageHash: \"\",\r\n    doctorAddress: this.props.doctor,\r\n    message: \"\",\r\n    visible: true,\r\n  };\r\n\r\n  static getInitialProps(props) {\r\n    return { doctor: props.query.address };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0] });\r\n  }\r\n\r\n  captureFilePrescription = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ bufferPrescription: Buffer(reader.result) });\r\n      console.log(\"bufferPrescription\", this.state.bufferPrescription);\r\n    };\r\n  };\r\n\r\n  captureFileReport = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ bufferReport: Buffer(reader.result) });\r\n      console.log(\"bufferReport\", this.state.bufferReport);\r\n    };\r\n  };\r\n\r\n  captureFileImage = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ imageHash: Buffer(reader.result) });\r\n      console.log(\"imageHash\", this.state.imageHash);\r\n    };\r\n  };\r\n\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const { name, age, gender, height, weight, doctorAddress } = this.state;\r\n    this.setState({\r\n      loading: true,\r\n      visible: false,\r\n      message: \"your files are being uploaded to ipfs\",\r\n      errorMessage: \"\",\r\n    });\r\n    try {\r\n      let resultPrescriptionLink = \"\";\r\n      if (this.state.bufferPrescription != null) {\r\n        const resultPrescription = await ipfs.add(\r\n          this.state.bufferPrescription\r\n        );\r\n        resultPrescriptionLink =\r\n          \"https://ipfs.infura.io/ipfs/\" + resultPrescription.path;\r\n      }\r\n      let resultReportLink = \"\";\r\n      if (this.state.bufferReport != null) {\r\n        const resultReport = await ipfs.add(this.state.bufferReport);\r\n        resultReportLink = \"https://ipfs.infura.io/ipfs/\" + resultReport.path;\r\n      }\r\n      const imageHash = await ipfs.add(this.state.imageHash);\r\n      this.setState({ message: \"added your files, creating your record\" });\r\n      await factory.methods\r\n        .createRecord(\r\n          name,\r\n          age,\r\n          gender,\r\n          height,\r\n          weight,\r\n          doctorAddress,\r\n          resultPrescriptionLink,\r\n          resultReportLink,\r\n          \"https://ipfs.infura.io/ipfs/\" + imageHash.path\r\n        )\r\n        .send({ from: this.state.account });\r\n      Router.pushRoute(\"/all\");\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ loading: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Input\r\n              label=\"name\"\r\n              placeholder=\"name\"\r\n              onChange={(event, { value }) => {\r\n                this.setState({ name: value });\r\n              }}\r\n            />\r\n            <Form.Input\r\n              label=\"age\"\r\n              placeholder=\"age\"\r\n              onChange={(e, { value }) => {\r\n                this.setState({ age: value });\r\n              }}\r\n            />\r\n            <Form.Select\r\n              label=\"gender\"\r\n              placeholder=\"gender\"\r\n              options={options}\r\n              onChange={(event, { value }) => {\r\n                this.setState({ gender: value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Input\r\n              label=\"height\"\r\n              placeholder=\"height\"\r\n              onChange={(event, { value }) => {\r\n                this.setState({ height: value });\r\n              }}\r\n            />\r\n            <Form.Input\r\n              label=\"weight\"\r\n              placeholder=\"weight\"\r\n              onChange={(e, { value }) => {\r\n                this.setState({ weight: value });\r\n              }}\r\n            />\r\n            <Form.Input\r\n              label=\"Profile Image\"\r\n              type=\"file\"\r\n              onChange={this.captureFileImage}\r\n            />\r\n          </Form.Group>\r\n          <Form.Field>\r\n            <label>prescriptions(if any previous prescriptions)</label>\r\n            <Form.Input type=\"file\" onChange={this.captureFilePrescription} />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>reports(if any previous reports)</label>\r\n            <Form.Input type=\"file\" onChange={this.captureFileReport} />\r\n          </Form.Field>\r\n          <Message error header=\"Oops!!\" content={this.state.errorMessage} />\r\n          <Message\r\n            info\r\n            header=\"Please wait It may take two minutes!!\"\r\n            content={this.state.message}\r\n            hidden={this.state.visible}\r\n          />\r\n          <Button loading={this.state.loading} primary type=\"submit\">\r\n            Create\r\n          </Button>\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default newRecord;\r\n"]},"metadata":{},"sourceType":"module"}