{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Link from \"next/link\";\nimport React, { Component } from \"react\";\nimport { Grid, Segment, Label, Image, Card, Button } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport record from \"../../ethereum/record\";\nimport web3 from \"../../ethereum/web3\";\nimport factory from \"../../ethereum/factory\";\n\nclass recordShow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      hidden: false\n    });\n  }\n\n  static async getInitialProps(props) {\n    let message = \"\";\n    const accounts = await web3.eth.getAccounts();\n    const currentRecord = record(props.query.address);\n    const NameAndImage = await currentRecord.methods.getNameandAddress().call({\n      from: accounts[0]\n    });\n\n    if (accounts[0] != NameAndImage[2] && accounts[0] != NameAndImage[3]) {\n      message = \"NA\";\n      return {\n        message\n      };\n    }\n\n    const doctor = await factory.methods.docs(NameAndImage[3]).call();\n    const details = await currentRecord.methods.getDetails().call({\n      from: accounts[0]\n    });\n    const prescriptionlength = await currentRecord.methods.getPrescriptionLength().call({\n      from: accounts[0]\n    });\n    const reportLength = await currentRecord.methods.getReportLength().call({\n      from: accounts[0]\n    });\n    const prescriptions = [];\n\n    for (var i = 0; i < prescriptionlength; i++) {\n      const prescriptionlink = await currentRecord.methods.getPrescription(i).call({\n        from: accounts[0]\n      });\n      prescriptions.push( /*#__PURE__*/_jsx(Link, {\n        href: prescriptionlink,\n        children: /*#__PURE__*/_jsxs(\"a\", {\n          target: \"_blank\",\n          children: [\"prescription \", i + 1]\n        })\n      }));\n    }\n\n    const reports = [];\n\n    for (var i = 0; i < reportLength; i++) {\n      const reportLink = await currentRecord.methods.getReport(i).call({\n        from: accounts[0]\n      });\n      reports.push( /*#__PURE__*/_jsx(Link, {\n        href: reportLink,\n        children: /*#__PURE__*/_jsxs(\"a\", {\n          target: \"_blank\",\n          children: [\"report \", i + 1]\n        })\n      }));\n    }\n\n    return {\n      NameAndImage,\n      details,\n      accounts,\n      reports,\n      prescriptions,\n      doctor,\n      message\n    };\n  }\n\n  async componentDidMount() {\n    if (this.props.accounts[0] == this.props.NameAndImage[3]) {\n      this.setState({\n        hidden: false\n      });\n    }\n  }\n\n  renderDoctor() {\n    return /*#__PURE__*/_jsxs(Card, {\n      children: [/*#__PURE__*/_jsx(Image, {\n        src: this.props.doctor.imageHash,\n        style: {\n          maxWidth: \"150px\",\n          maxHeight: \"150px\",\n          display: \"block\"\n        }\n      }), /*#__PURE__*/_jsxs(Card.Content, {\n        children: [/*#__PURE__*/_jsx(Card.Header, {\n          content: this.props.doctor.description\n        }), /*#__PURE__*/_jsx(Card.Description, {\n          content: this.props.doctor.speciality\n        })]\n      })]\n    });\n  }\n\n  render() {\n    console.log(this.props);\n\n    if (this.props.message == \"NA\") {\n      return /*#__PURE__*/_jsx(Layout, {\n        children: /*#__PURE__*/_jsx(\"h1\", {\n          children: \"You cant access this profile\"\n        })\n      });\n    }\n\n    return /*#__PURE__*/_jsx(Layout, {\n      children: /*#__PURE__*/_jsxs(Grid, {\n        columns: 1,\n        children: [/*#__PURE__*/_jsx(Button, {\n          floated: \"right\",\n          active: this.state.hidden\n        }), /*#__PURE__*/_jsx(Grid.Column, {\n          children: /*#__PURE__*/_jsxs(Segment, {\n            raised: true,\n            children: [/*#__PURE__*/_jsx(Label, {\n              as: \"a\",\n              color: \"red\",\n              ribbon: true,\n              children: \"Overview\"\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: \"Name and profile image\"\n            }), /*#__PURE__*/_jsx(\"h3\", {\n              children: this.props.NameAndImage[0]\n            }), /*#__PURE__*/_jsx(Image, {\n              style: {\n                maxWidth: \"150px\",\n                maxHeight: \"150px\",\n                display: \"block\"\n              },\n              src: this.props.NameAndImage[1]\n            }), /*#__PURE__*/_jsx(\"p\", {}), /*#__PURE__*/_jsx(Label, {\n              as: \"a\",\n              color: \"blue\",\n              ribbon: true,\n              children: \"Details\"\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: \"your details\"\n            }), /*#__PURE__*/_jsx(\"p\", {}), /*#__PURE__*/_jsxs(\"p\", {\n              children: [\"Age: \", this.props.details[1]]\n            }), /*#__PURE__*/_jsxs(\"p\", {\n              children: [\"height: \", this.props.details[2]]\n            }), /*#__PURE__*/_jsxs(\"p\", {\n              children: [\"weight: \", this.props.details[3]]\n            }), /*#__PURE__*/_jsxs(\"p\", {\n              children: [\"gender: \", this.props.details[4]]\n            }), /*#__PURE__*/_jsx(Label, {\n              as: \"a\",\n              color: \"orange\",\n              ribbon: true,\n              children: \"prescription links\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              children: this.props.prescriptions\n            }), /*#__PURE__*/_jsx(Label, {\n              as: \"a\",\n              color: \"teal\",\n              ribbon: true,\n              children: \"report links\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              children: this.props.reports\n            }), /*#__PURE__*/_jsx(Label, {\n              as: \"a\",\n              color: \"pink\",\n              ribbon: true,\n              children: \"your doctor\"\n            }), this.renderDoctor()]\n          })\n        })]\n      })\n    });\n  }\n\n}\n\nexport default recordShow;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/Records/show.js"],"names":["Link","React","Component","Grid","Segment","Label","Image","Card","Button","Layout","record","web3","factory","recordShow","hidden","getInitialProps","props","message","accounts","eth","getAccounts","currentRecord","query","address","NameAndImage","methods","getNameandAddress","call","from","doctor","docs","details","getDetails","prescriptionlength","getPrescriptionLength","reportLength","getReportLength","prescriptions","i","prescriptionlink","getPrescription","push","reports","reportLink","getReport","componentDidMount","setState","renderDoctor","imageHash","maxWidth","maxHeight","display","description","speciality","render","console","log","state"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,IAAtC,EAA4CC,MAA5C,QAA0D,mBAA1D;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;AAEA,MAAMC,UAAN,SAAyBX,SAAzB,CAAmC;AAAA;AAAA;;AAAA,mCACzB;AAAEY,MAAAA,MAAM,EAAE;AAAV,KADyB;AAAA;;AAEjC,eAAaC,eAAb,CAA6BC,KAA7B,EAAoC;AAClC,QAAIC,OAAO,GAAG,EAAd;AACA,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMC,aAAa,GAAGX,MAAM,CAACM,KAAK,CAACM,KAAN,CAAYC,OAAb,CAA5B;AACA,UAAMC,YAAY,GAAG,MAAMH,aAAa,CAACI,OAAd,CACxBC,iBADwB,GAExBC,IAFwB,CAEnB;AAAEC,MAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD;AAAhB,KAFmB,CAA3B;;AAGA,QAAIA,QAAQ,CAAC,CAAD,CAAR,IAAeM,YAAY,CAAC,CAAD,CAA3B,IAAkCN,QAAQ,CAAC,CAAD,CAAR,IAAeM,YAAY,CAAC,CAAD,CAAjE,EAAsE;AACpEP,MAAAA,OAAO,GAAG,IAAV;AACA,aAAO;AAAEA,QAAAA;AAAF,OAAP;AACD;;AACD,UAAMY,MAAM,GAAG,MAAMjB,OAAO,CAACa,OAAR,CAAgBK,IAAhB,CAAqBN,YAAY,CAAC,CAAD,CAAjC,EAAsCG,IAAtC,EAArB;AACA,UAAMI,OAAO,GAAG,MAAMV,aAAa,CAACI,OAAd,CACnBO,UADmB,GAEnBL,IAFmB,CAEd;AAAEC,MAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD;AAAhB,KAFc,CAAtB;AAGA,UAAMe,kBAAkB,GAAG,MAAMZ,aAAa,CAACI,OAAd,CAC9BS,qBAD8B,GAE9BP,IAF8B,CAEzB;AAAEC,MAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD;AAAhB,KAFyB,CAAjC;AAGA,UAAMiB,YAAY,GAAG,MAAMd,aAAa,CAACI,OAAd,CACxBW,eADwB,GAExBT,IAFwB,CAEnB;AAAEC,MAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD;AAAhB,KAFmB,CAA3B;AAGA,UAAMmB,aAAa,GAAG,EAAtB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,kBAApB,EAAwCK,CAAC,EAAzC,EAA6C;AAC3C,YAAMC,gBAAgB,GAAG,MAAMlB,aAAa,CAACI,OAAd,CAC5Be,eAD4B,CACZF,CADY,EAE5BX,IAF4B,CAEvB;AAAEC,QAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD;AAAhB,OAFuB,CAA/B;AAGAmB,MAAAA,aAAa,CAACI,IAAd,eACE,KAAC,IAAD;AAAM,QAAA,IAAI,EAAEF,gBAAZ;AAAA,+BACE;AAAG,UAAA,MAAM,EAAC,QAAV;AAAA,sCAAiCD,CAAC,GAAG,CAArC;AAAA;AADF,QADF;AAKD;;AACD,UAAMI,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,YAApB,EAAkCG,CAAC,EAAnC,EAAuC;AACrC,YAAMK,UAAU,GAAG,MAAMtB,aAAa,CAACI,OAAd,CACtBmB,SADsB,CACZN,CADY,EAEtBX,IAFsB,CAEjB;AAAEC,QAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD;AAAhB,OAFiB,CAAzB;AAGAwB,MAAAA,OAAO,CAACD,IAAR,eACE,KAAC,IAAD;AAAM,QAAA,IAAI,EAAEE,UAAZ;AAAA,+BACE;AAAG,UAAA,MAAM,EAAC,QAAV;AAAA,gCAA2BL,CAAC,GAAG,CAA/B;AAAA;AADF,QADF;AAKD;;AACD,WAAO;AACLd,MAAAA,YADK;AAELO,MAAAA,OAFK;AAGLb,MAAAA,QAHK;AAILwB,MAAAA,OAJK;AAKLL,MAAAA,aALK;AAMLR,MAAAA,MANK;AAOLZ,MAAAA;AAPK,KAAP;AASD;;AACD,QAAM4B,iBAAN,GAA0B;AACxB,QAAI,KAAK7B,KAAL,CAAWE,QAAX,CAAoB,CAApB,KAA0B,KAAKF,KAAL,CAAWQ,YAAX,CAAwB,CAAxB,CAA9B,EAA0D;AACxD,WAAKsB,QAAL,CAAc;AAAEhC,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD;AACF;;AACDiC,EAAAA,YAAY,GAAG;AACb,wBACE,MAAC,IAAD;AAAA,8BACE,KAAC,KAAD;AACE,QAAA,GAAG,EAAE,KAAK/B,KAAL,CAAWa,MAAX,CAAkBmB,SADzB;AAEE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,OADL;AAELC,UAAAA,SAAS,EAAE,OAFN;AAGLC,UAAAA,OAAO,EAAE;AAHJ;AAFT,QADF,eASE,MAAC,IAAD,CAAM,OAAN;AAAA,gCACE,KAAC,IAAD,CAAM,MAAN;AAAa,UAAA,OAAO,EAAE,KAAKnC,KAAL,CAAWa,MAAX,CAAkBuB;AAAxC,UADF,eAEE,KAAC,IAAD,CAAM,WAAN;AAAkB,UAAA,OAAO,EAAE,KAAKpC,KAAL,CAAWa,MAAX,CAAkBwB;AAA7C,UAFF;AAAA,QATF;AAAA,MADF;AAgBD;;AACDC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxC,KAAjB;;AACA,QAAI,KAAKA,KAAL,CAAWC,OAAX,IAAsB,IAA1B,EAAgC;AAC9B,0BACE,KAAC,MAAD;AAAA,+BACE;AAAA;AAAA;AADF,QADF;AAKD;;AACD,wBACE,KAAC,MAAD;AAAA,6BACE,MAAC,IAAD;AAAM,QAAA,OAAO,EAAE,CAAf;AAAA,gCACE,KAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,OAAhB;AAAwB,UAAA,MAAM,EAAE,KAAKwC,KAAL,CAAW3C;AAA3C,UADF,eAEE,KAAC,IAAD,CAAM,MAAN;AAAA,iCACE,MAAC,OAAD;AAAS,YAAA,MAAM,MAAf;AAAA,oCACE,KAAC,KAAD;AAAO,cAAA,EAAE,EAAC,GAAV;AAAc,cAAA,KAAK,EAAC,KAApB;AAA0B,cAAA,MAAM,MAAhC;AAAA;AAAA,cADF,eAIE;AAAA;AAAA,cAJF,eAKE;AAAA,wBAAK,KAAKE,KAAL,CAAWQ,YAAX,CAAwB,CAAxB;AAAL,cALF,eAOE,KAAC,KAAD;AACE,cAAA,KAAK,EAAE;AACLyB,gBAAAA,QAAQ,EAAE,OADL;AAELC,gBAAAA,SAAS,EAAE,OAFN;AAGLC,gBAAAA,OAAO,EAAE;AAHJ,eADT;AAME,cAAA,GAAG,EAAE,KAAKnC,KAAL,CAAWQ,YAAX,CAAwB,CAAxB;AANP,cAPF,eAeE,aAfF,eAgBE,KAAC,KAAD;AAAO,cAAA,EAAE,EAAC,GAAV;AAAc,cAAA,KAAK,EAAC,MAApB;AAA2B,cAAA,MAAM,MAAjC;AAAA;AAAA,cAhBF,eAmBE;AAAA;AAAA,cAnBF,eAoBE,aApBF,eAqBE;AAAA,kCAAS,KAAKR,KAAL,CAAWe,OAAX,CAAmB,CAAnB,CAAT;AAAA,cArBF,eAsBE;AAAA,qCAAY,KAAKf,KAAL,CAAWe,OAAX,CAAmB,CAAnB,CAAZ;AAAA,cAtBF,eAuBE;AAAA,qCAAY,KAAKf,KAAL,CAAWe,OAAX,CAAmB,CAAnB,CAAZ;AAAA,cAvBF,eAwBE;AAAA,qCAAY,KAAKf,KAAL,CAAWe,OAAX,CAAmB,CAAnB,CAAZ;AAAA,cAxBF,eAyBE,KAAC,KAAD;AAAO,cAAA,EAAE,EAAC,GAAV;AAAc,cAAA,KAAK,EAAC,QAApB;AAA6B,cAAA,MAAM,MAAnC;AAAA;AAAA,cAzBF,eA4BE;AAAA,wBAAI,KAAKf,KAAL,CAAWqB;AAAf,cA5BF,eA6BE,KAAC,KAAD;AAAO,cAAA,EAAE,EAAC,GAAV;AAAc,cAAA,KAAK,EAAC,MAApB;AAA2B,cAAA,MAAM,MAAjC;AAAA;AAAA,cA7BF,eAgCE;AAAA,wBAAI,KAAKrB,KAAL,CAAW0B;AAAf,cAhCF,eAiCE,KAAC,KAAD;AAAO,cAAA,EAAE,EAAC,GAAV;AAAc,cAAA,KAAK,EAAC,MAApB;AAA2B,cAAA,MAAM,MAAjC;AAAA;AAAA,cAjCF,EAoCG,KAAKK,YAAL,EApCH;AAAA;AADF,UAFF;AAAA;AADF,MADF;AA+CD;;AAtIgC;;AAyInC,eAAelC,UAAf","sourcesContent":["import Link from \"next/link\";\r\nimport React, { Component } from \"react\";\r\nimport { Grid, Segment, Label, Image, Card, Button } from \"semantic-ui-react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport record from \"../../ethereum/record\";\r\nimport web3 from \"../../ethereum/web3\";\r\nimport factory from \"../../ethereum/factory\";\r\n\r\nclass recordShow extends Component {\r\n  state = { hidden: false };\r\n  static async getInitialProps(props) {\r\n    let message = \"\";\r\n    const accounts = await web3.eth.getAccounts();\r\n    const currentRecord = record(props.query.address);\r\n    const NameAndImage = await currentRecord.methods\r\n      .getNameandAddress()\r\n      .call({ from: accounts[0] });\r\n    if (accounts[0] != NameAndImage[2] && accounts[0] != NameAndImage[3]) {\r\n      message = \"NA\";\r\n      return { message };\r\n    }\r\n    const doctor = await factory.methods.docs(NameAndImage[3]).call();\r\n    const details = await currentRecord.methods\r\n      .getDetails()\r\n      .call({ from: accounts[0] });\r\n    const prescriptionlength = await currentRecord.methods\r\n      .getPrescriptionLength()\r\n      .call({ from: accounts[0] });\r\n    const reportLength = await currentRecord.methods\r\n      .getReportLength()\r\n      .call({ from: accounts[0] });\r\n    const prescriptions = [];\r\n    for (var i = 0; i < prescriptionlength; i++) {\r\n      const prescriptionlink = await currentRecord.methods\r\n        .getPrescription(i)\r\n        .call({ from: accounts[0] });\r\n      prescriptions.push(\r\n        <Link href={prescriptionlink}>\r\n          <a target=\"_blank\">prescription {i + 1}</a>\r\n        </Link>\r\n      );\r\n    }\r\n    const reports = [];\r\n    for (var i = 0; i < reportLength; i++) {\r\n      const reportLink = await currentRecord.methods\r\n        .getReport(i)\r\n        .call({ from: accounts[0] });\r\n      reports.push(\r\n        <Link href={reportLink}>\r\n          <a target=\"_blank\">report {i + 1}</a>\r\n        </Link>\r\n      );\r\n    }\r\n    return {\r\n      NameAndImage,\r\n      details,\r\n      accounts,\r\n      reports,\r\n      prescriptions,\r\n      doctor,\r\n      message,\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    if (this.props.accounts[0] == this.props.NameAndImage[3]) {\r\n      this.setState({ hidden: false });\r\n    }\r\n  }\r\n  renderDoctor() {\r\n    return (\r\n      <Card>\r\n        <Image\r\n          src={this.props.doctor.imageHash}\r\n          style={{\r\n            maxWidth: \"150px\",\r\n            maxHeight: \"150px\",\r\n            display: \"block\",\r\n          }}\r\n        />\r\n        <Card.Content>\r\n          <Card.Header content={this.props.doctor.description} />\r\n          <Card.Description content={this.props.doctor.speciality} />\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n  render() {\r\n    console.log(this.props);\r\n    if (this.props.message == \"NA\") {\r\n      return (\r\n        <Layout>\r\n          <h1>You cant access this profile</h1>\r\n        </Layout>\r\n      );\r\n    }\r\n    return (\r\n      <Layout>\r\n        <Grid columns={1}>\r\n          <Button floated=\"right\" active={this.state.hidden}></Button>\r\n          <Grid.Column>\r\n            <Segment raised>\r\n              <Label as=\"a\" color=\"red\" ribbon>\r\n                Overview\r\n              </Label>\r\n              <span>Name and profile image</span>\r\n              <h3>{this.props.NameAndImage[0]}</h3>\r\n\r\n              <Image\r\n                style={{\r\n                  maxWidth: \"150px\",\r\n                  maxHeight: \"150px\",\r\n                  display: \"block\",\r\n                }}\r\n                src={this.props.NameAndImage[1]}\r\n              />\r\n              <p></p>\r\n              <Label as=\"a\" color=\"blue\" ribbon>\r\n                Details\r\n              </Label>\r\n              <span>your details</span>\r\n              <p></p>\r\n              <p>Age: {this.props.details[1]}</p>\r\n              <p>height: {this.props.details[2]}</p>\r\n              <p>weight: {this.props.details[3]}</p>\r\n              <p>gender: {this.props.details[4]}</p>\r\n              <Label as=\"a\" color=\"orange\" ribbon>\r\n                prescription links\r\n              </Label>\r\n              <p>{this.props.prescriptions}</p>\r\n              <Label as=\"a\" color=\"teal\" ribbon>\r\n                report links\r\n              </Label>\r\n              <p>{this.props.reports}</p>\r\n              <Label as=\"a\" color=\"pink\" ribbon>\r\n                your doctor\r\n              </Label>\r\n              {this.renderDoctor()}\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default recordShow;\r\n"]},"metadata":{},"sourceType":"module"}