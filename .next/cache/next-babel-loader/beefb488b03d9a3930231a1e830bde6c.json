{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Button, Form, Message } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport record from \"../../ethereum/record\";\nimport web3 from \"../../ethereum/web3\";\n\nvar ipfsClient = require(\"ipfs-http-client\");\n\nvar ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nvar addRecord = /*#__PURE__*/function (_Component) {\n  _inherits(addRecord, _Component);\n\n  var _super = _createSuper(addRecord);\n\n  function addRecord() {\n    var _this;\n\n    _classCallCheck(this, addRecord);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      accounts: [],\n      reportBuffer: null,\n      prescriptionBuffer: null,\n      recordInstance: null,\n      loading: false,\n      message: \"\",\n      errorMessage: \"\",\n      visible: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"captureReport\", function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          reportBuffer: Buffer(reader.result)\n        });\n\n        console.log(\"buffer\", _this.state.reportBuffer);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"capturePrescription\", function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          prescriptionBuffer: Buffer(reader.result)\n        });\n\n        console.log(\"buffer\", _this.state.prescriptionBuffer);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var resultPrescription, resultReport, link, _link;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  message: \"Your files are being added to ipfs\",\n                  errorMessage: \"\",\n                  visible: false\n                });\n\n                _context.prev = 2;\n                resultPrescription = null;\n                resultReport = null;\n\n                if (!(_this.state.prescriptionBuffer != null)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return ipfs.add(_this.state.prescriptionBuffer);\n\n              case 8:\n                resultPrescription = _context.sent;\n\n              case 9:\n                if (!(_this.state.reportBuffer != null)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 12;\n                return ipfs.add(_this.state.reportBuffer);\n\n              case 12:\n                resultReport = _context.sent;\n\n              case 13:\n                _this.setState({\n                  message: \"added your files pushing to blockchain\"\n                });\n\n                if (resultPrescription != null) {\n                  link = \"https://ipfs.infura.io/ipfs/\" + resultPrescription.path;\n\n                  _this.state.recordInstance.methods.setPrescriptionHash(_this.state.accounts[0], link).send({\n                    from: _this.state.accounts[0]\n                  });\n                }\n\n                if (resultReport != null) {\n                  _link = \"https://ipfs.infura.io/ipfs/\" + resultReport.path;\n\n                  _this.state.recordInstance.methods.setreportHash(_this.state.accounts[0], _link).send({\n                    from: _this.state.accounts[0]\n                  });\n                }\n\n                _context.next = 21;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 21:\n                _this.setState({\n                  loading: false,\n                  message: \"succefully done Thank you!!\"\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 18]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(addRecord, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accounts, recordInstance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                recordInstance = record(this.props.address);\n                this.setState({\n                  accounts: accounts,\n                  recordInstance: recordInstance\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxs(Layout, {\n        children: [/*#__PURE__*/_jsx(\"h3\", {\n          children: \"add files\"\n        }), /*#__PURE__*/_jsxs(Form, {\n          error: !!this.state.errorMessage,\n          children: [/*#__PURE__*/_jsx(Form.Input, {\n            type: \"file\",\n            label: \"prescription(if any)\",\n            onChange: this.capturePrescription\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            type: \"file\",\n            label: \"report(if any)\",\n            onChange: this.captureReport\n          }), /*#__PURE__*/_jsx(Button, {\n            primary: true,\n            loading: this.state.loading,\n            children: \"Submit\"\n          }), /*#__PURE__*/_jsx(Message, {\n            error: true,\n            header: \"Oops!!\",\n            content: this.state.errorMessage\n          }), /*#__PURE__*/_jsx(Message, {\n            info: true,\n            header: \":)\",\n            content: this.state.message,\n            hidden: this.state.visible\n          })]\n        })]\n      });\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address = props.query.address;\n      var docaddress = props.query.docaddress;\n      return {\n        address: address,\n        docaddress: docaddress\n      };\n    }\n  }]);\n\n  return addRecord;\n}(Component);\n\nexport default addRecord;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/Records/add.js"],"names":["React","Component","Button","Form","Message","Layout","record","web3","ipfsClient","require","ipfs","host","port","protocol","addRecord","accounts","reportBuffer","prescriptionBuffer","recordInstance","loading","message","errorMessage","visible","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","state","resultPrescription","resultReport","add","link","path","methods","setPrescriptionHash","send","from","setreportHash","eth","getAccounts","props","address","capturePrescription","captureReport","query","docaddress"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport record from \"../../ethereum/record\";\r\nimport web3 from \"../../ethereum/web3\";\r\n\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\n\r\nclass addRecord extends Component {\r\n  state = {\r\n    accounts: [],\r\n    reportBuffer: null,\r\n    prescriptionBuffer: null,\r\n    recordInstance: null,\r\n    loading: false,\r\n    message: \"\",\r\n    errorMessage: \"\",\r\n    visible: true,\r\n  };\r\n  static getInitialProps(props) {\r\n    const address = props.query.address;\r\n    const docaddress = props.query.docaddress;\r\n    return { address, docaddress };\r\n  }\r\n  captureReport = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ reportBuffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.reportBuffer);\r\n    };\r\n  };\r\n  capturePrescription = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ prescriptionBuffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.prescriptionBuffer);\r\n    };\r\n  };\r\n  async componentDidMount() {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const recordInstance = record(this.props.address);\r\n    this.setState({ accounts, recordInstance });\r\n  }\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      loading: true,\r\n      message: \"Your files are being added to ipfs\",\r\n      errorMessage: \"\",\r\n      visible: false,\r\n    });\r\n    try {\r\n      let resultPrescription = null;\r\n      let resultReport = null;\r\n      if (this.state.prescriptionBuffer != null)\r\n        resultPrescription = await ipfs.add(this.state.prescriptionBuffer);\r\n      if (this.state.reportBuffer != null)\r\n        resultReport = await ipfs.add(this.state.reportBuffer);\r\n      this.setState({ message: \"added your files pushing to blockchain\" });\r\n      if (resultPrescription != null) {\r\n        const link = \"https://ipfs.infura.io/ipfs/\" + resultPrescription.path;\r\n        this.state.recordInstance.methods\r\n          .setPrescriptionHash(this.state.accounts[0], link)\r\n          .send({ from: this.state.accounts[0] });\r\n      }\r\n      if (resultReport != null) {\r\n        const link = \"https://ipfs.infura.io/ipfs/\" + resultReport.path;\r\n        this.state.recordInstance.methods\r\n          .setreportHash(this.state.accounts[0], link)\r\n          .send({ from: this.state.accounts[0] });\r\n      }\r\n    } catch (error) {\r\n      this.setState({ errorMessage: error.message });\r\n    }\r\n    this.setState({ loading: false, message: \"succefully done Thank you!!\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>add files</h3>\r\n        <Form error={!!this.state.errorMessage}>\r\n          <Form.Input\r\n            type=\"file\"\r\n            label=\"prescription(if any)\"\r\n            onChange={this.capturePrescription}\r\n          />\r\n          <Form.Input\r\n            type=\"file\"\r\n            label=\"report(if any)\"\r\n            onChange={this.captureReport}\r\n          />\r\n          <Button primary loading={this.state.loading}>\r\n            Submit\r\n          </Button>\r\n          <Message error header=\"Oops!!\" content={this.state.errorMessage} />\r\n          <Message\r\n            info\r\n            header=\":)\"\r\n            content={this.state.message}\r\n            hidden={this.state.visible}\r\n          />\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default addRecord;\r\n"]},"metadata":{},"sourceType":"module"}