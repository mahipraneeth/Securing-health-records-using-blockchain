{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createFactory } from \"react\";\nimport { Button, Form, Input, Message } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport factory from \"../../ethereum/factory\";\nimport web3 from \"../../ethereum/web3\";\nimport healthrecord from \"../../ethereum/build/healthrecord.json\";\nimport { Router } from \"../../routes\"; //ipfs requirements\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nclass newRecord extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: \"\",\n      buffer: null,\n      account: null,\n      recordhash: null,\n      errorMessage: \"\",\n      loading: false,\n      age: \"\"\n    });\n\n    _defineProperty(this, \"captureFile\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log(\"buffer\", this.state.buffer);\n      };\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      await window.ethereum.enable();\n      this.setState({\n        loading: true,\n        errorMessage: \"\"\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n        console.log(\"submitting to ipfs \", accounts);\n        await factory.methods.createRecord().send({\n          from: this.state.account,\n          gas: \"1000000\"\n        }); //console.log(\"adding to ipfs\");\n\n        const result = await ipfs.add(this.state.buffer); //console.log(\"added\");\n\n        this.setState({\n          loading: false\n        });\n        console.log(result.path);\n        Router.pushRoute(\"/\");\n      } catch (err) {\n        console.log(err.message);\n        this.setState({\n          errorMessage: err.message\n        });\n      } //console.log(this.state.buffer);\n\n    });\n  }\n\n  async componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsx(Layout, {\n      children: /*#__PURE__*/_jsxs(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage,\n        children: [/*#__PURE__*/_jsxs(Form.Group, {\n          widths: \"equal\",\n          children: [/*#__PURE__*/_jsx(Form.Input, {\n            label: \"name\",\n            placeholder: \"name\",\n            onChange: event => {\n              this.setState({\n                name: event.target.value\n              });\n            }\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            label: \"age\",\n            placeholder: \"age\",\n            onChange: event => {\n              this.setState({\n                name: event.target.value\n              });\n            }\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"files\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"file\",\n            onChange: this.captureFile\n          })]\n        }), /*#__PURE__*/_jsx(Message, {\n          error: true,\n          header: \"Oops!!\",\n          content: this.state.errorMessage\n        }), /*#__PURE__*/_jsx(Button, {\n          loading: this.state.loading,\n          primary: true,\n          type: \"submit\",\n          children: \"Create\"\n        })]\n      })\n    });\n  }\n\n}\n\nexport default newRecord;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/Records/new.js"],"names":["React","Component","createFactory","Button","Form","Input","Message","Layout","factory","web3","healthrecord","Router","ipfsClient","require","ipfs","host","port","protocol","newRecord","name","buffer","account","recordhash","errorMessage","loading","age","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","state","ethereum","enable","accounts","eth","getAccounts","methods","createRecord","send","from","gas","add","path","pushRoute","err","message","componentDidMount","render","onSubmit","value","captureFile"],"mappings":"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","sourcesContent":["import React, { Component, createFactory } from \"react\";\r\nimport { Button, Form, Input, Message } from \"semantic-ui-react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport factory from \"../../ethereum/factory\";\r\nimport web3 from \"../../ethereum/web3\";\r\nimport healthrecord from \"../../ethereum/build/healthrecord.json\";\r\nimport { Router } from \"../../routes\";\r\n\r\n//ipfs requirements\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\n\r\nclass newRecord extends Component {\r\n  state = {\r\n    name: \"\",\r\n    buffer: null,\r\n    account: null,\r\n    recordhash: null,\r\n    errorMessage: \"\",\r\n    loading: false,\r\n    age: \"\",\r\n  };\r\n\r\n  async componentDidMount() {}\r\n\r\n  captureFile = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.buffer);\r\n    };\r\n  };\r\n\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await window.ethereum.enable();\r\n    this.setState({ loading: true, errorMessage: \"\" });\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      this.setState({ account: accounts[0] });\r\n      console.log(\"submitting to ipfs \", accounts);\r\n      await factory.methods\r\n        .createRecord()\r\n        .send({ from: this.state.account, gas: \"1000000\" });\r\n      //console.log(\"adding to ipfs\");\r\n      const result = await ipfs.add(this.state.buffer);\r\n      //console.log(\"added\");\r\n      this.setState({ loading: false });\r\n      console.log(result.path);\r\n      Router.pushRoute(\"/\");\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    //console.log(this.state.buffer);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Input\r\n              label=\"name\"\r\n              placeholder=\"name\"\r\n              onChange={(event) => {\r\n                this.setState({ name: event.target.value });\r\n              }}\r\n            />\r\n            <Form.Input\r\n              label=\"age\"\r\n              placeholder=\"age\"\r\n              onChange={(event) => {\r\n                this.setState({ name: event.target.value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Field>\r\n            <label>files</label>\r\n            <input type=\"file\" onChange={this.captureFile} />\r\n          </Form.Field>\r\n          <Message error header=\"Oops!!\" content={this.state.errorMessage} />\r\n          <Button loading={this.state.loading} primary type=\"submit\">\r\n            Create\r\n          </Button>\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default newRecord;\r\n"]},"metadata":{},"sourceType":"module"}