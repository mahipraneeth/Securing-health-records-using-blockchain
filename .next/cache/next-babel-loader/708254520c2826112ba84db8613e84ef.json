{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\Securing health records using blockchain\\\\pages\\\\Records\\\\new.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createFactory } from \"react\";\nimport { Button, Form, Input } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport factory from \"../../ethereum/factory\";\nimport web3 from \"../../ethereum/web3\";\nimport healthrecord from \"../../ethereum/build/healthrecord.json\"; //ipfs requirements\n\nvar ipfsClient = require(\"ipfs-http-client\");\n\nvar ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nvar newRecord = /*#__PURE__*/function (_Component) {\n  _inherits(newRecord, _Component);\n\n  var _super = _createSuper(newRecord);\n\n  function newRecord() {\n    var _this;\n\n    _classCallCheck(this, newRecord);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      name: \"\",\n      buffer: null,\n      account: null,\n      recordhash: null,\n      errorMessage: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"captureFile\", function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log(\"buffer\", _this.state.buffer);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts, records, record, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                console.log(_this.state.buffer);\n                _context.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context.sent;\n\n                _this.setState({\n                  account: accounts[0]\n                });\n\n                console.log(\"submitting to ipfs \", accounts);\n                _context.next = 9;\n                return factory.methods.createRecord().send({\n                  from: _this.state.account,\n                  gas: \"1000000\"\n                });\n\n              case 9:\n                _context.next = 11;\n                return factory.methods.getDeployedRecords().call({\n                  from: _this.state.account\n                });\n\n              case 11:\n                records = _context.sent;\n                _context.next = 14;\n                return new web3.eth.Contract(JSON.parse(healthrecord[\"interface\"]), records[0]);\n\n              case 14:\n                record = _context.sent;\n                _context.next = 17;\n                return ipfs.add(_this.state.buffer);\n\n              case 17:\n                result = _context.sent;\n                console.log(result.path);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(newRecord, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return window.ethereum.enable();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.onSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"enter your name\",\n              value: this.state.name,\n              onChange: function onChange(event) {\n                _this2.setState({\n                  name: event.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"files\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: this.captureFile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return newRecord;\n}(Component);\n\nexport default newRecord;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/Records/new.js"],"names":["React","Component","createFactory","Button","Form","Input","Layout","factory","web3","healthrecord","ipfsClient","require","ipfs","host","port","protocol","newRecord","name","buffer","account","recordhash","errorMessage","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","state","eth","getAccounts","accounts","methods","createRecord","send","from","gas","getDeployedRecords","call","records","Contract","JSON","parse","record","add","path","ethereum","enable","onSubmit","value","captureFile"],"mappings":"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","sourcesContent":["import React, { Component, createFactory } from \"react\";\r\nimport { Button, Form, Input } from \"semantic-ui-react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport factory from \"../../ethereum/factory\";\r\nimport web3 from \"../../ethereum/web3\";\r\nimport healthrecord from \"../../ethereum/build/healthrecord.json\";\r\n//ipfs requirements\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\n\r\nclass newRecord extends Component {\r\n  state = {\r\n    name: \"\",\r\n    buffer: null,\r\n    account: null,\r\n    recordhash: null,\r\n    errorMessage: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await window.ethereum.enable();\r\n  }\r\n\r\n  captureFile = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.buffer);\r\n    };\r\n  };\r\n\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    console.log(this.state.buffer);\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0] });\r\n    console.log(\"submitting to ipfs \", accounts);\r\n    await factory.methods\r\n      .createRecord()\r\n      .send({ from: this.state.account, gas: \"1000000\" });\r\n    const records = await factory.methods\r\n      .getDeployedRecords()\r\n      .call({ from: this.state.account });\r\n    const record = await new web3.eth.Contract(\r\n      JSON.parse(healthrecord.interface),\r\n      records[0]\r\n    );\r\n    const result = await ipfs.add(this.state.buffer);\r\n    console.log(result.path);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Form onSubmit={this.onSubmit}>\r\n          <Form.Field>\r\n            <label>name</label>\r\n            <Input\r\n              placeholder=\"enter your name\"\r\n              value={this.state.name}\r\n              onChange={(event) => {\r\n                this.setState({ name: event.target.value });\r\n              }}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>files</label>\r\n            <input type=\"file\" onChange={this.captureFile} />\r\n          </Form.Field>\r\n          <Button type=\"submit\">submit</Button>\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default newRecord;\r\n"]},"metadata":{},"sourceType":"module"}