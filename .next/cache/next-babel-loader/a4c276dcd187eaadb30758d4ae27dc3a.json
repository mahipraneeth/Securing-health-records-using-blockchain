{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Form, Icon, Message } from \"semantic-ui-react\";\nimport Layout from \"../components/Layout\";\nimport factory from \"../ethereum/factory\";\nimport web3 from \"../ethereum/web3\";\nimport { Router } from \"../routes\";\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nclass newDoc extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: \"\",\n      address: \"\",\n      speciality: \"\",\n      buffer: null,\n      loading: false,\n      errorMessage: \"\",\n      account: \"\",\n      manageraddress: \"\"\n    });\n\n    _defineProperty(this, \"captureFile\", event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log(\"buffer\", this.state.buffer);\n      };\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: \"\"\n      });\n\n      try {\n        const result = await ipfs.add(this.state.buffer);\n        const accounts = await web3.eth.getAccounts();\n        const imagelink = \"https://ipfs.infura.io/ipfs/\" + result.path;\n        await factory.methods.registerDoctor(this.state.address, imagelink, this.state.speciality, this.state.name).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n        console.log(err);\n      }\n\n      this.setState({\n        loading: false\n      });\n      Router.pushRoute(\"/doctors\");\n    });\n  }\n\n  async componentDidMount() {\n    const accounts = await web3.eth.getAccounts();\n    const manageraddress = await factory.methods.manager().call();\n    this.setState({\n      account: accounts[0],\n      manageraddress\n    });\n  }\n\n  render() {\n    if (this.state.account != this.state.manageraddress) {\n      return /*#__PURE__*/_jsx(Layout, {\n        children: /*#__PURE__*/_jsx(\"h1\", {\n          children: \"Sorry this page can only be accesed by the manager\"\n        })\n      });\n    }\n\n    return /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        children: \"Register Doctor\"\n      }), /*#__PURE__*/_jsxs(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage,\n        children: [/*#__PURE__*/_jsxs(Form.Group, {\n          widths: \"equal\",\n          children: [/*#__PURE__*/_jsx(Form.Input, {\n            fluid: true,\n            label: \"name\",\n            placeholder: \"name\",\n            onChange: event => {\n              this.setState({\n                name: event.target.value\n              });\n            },\n            required: true\n          }), /*#__PURE__*/_jsx(Form.Input, {\n            fluid: true,\n            label: \"address\",\n            placeholder: \"address\",\n            onChange: event => {\n              this.setState({\n                address: event.target.value\n              });\n            },\n            required: true\n          })]\n        }), /*#__PURE__*/_jsx(Form.TextArea, {\n          label: \"description about speciality\",\n          placeholder: \"Type here\",\n          onChange: event => {\n            this.setState({\n              speciality: event.target.value\n            });\n          },\n          required: true\n        }), /*#__PURE__*/_jsx(Form.Input, {\n          type: \"file\",\n          label: \"image\",\n          onChange: this.captureFile,\n          required: true\n        }), /*#__PURE__*/_jsxs(Button, {\n          primary: true,\n          type: \"submit\",\n          loading: this.state.loading,\n          children: [/*#__PURE__*/_jsx(Icon, {\n            name: \"add circle\"\n          }), \"Register\"]\n        }), /*#__PURE__*/_jsx(Message, {\n          error: true,\n          header: \"Oops!!\",\n          content: this.state.errorMessage\n        })]\n      })]\n    });\n  }\n\n}\n\nexport default newDoc;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/newdoc.js"],"names":["React","Component","Button","Form","Icon","Message","Layout","factory","web3","Router","ipfsClient","require","ipfs","host","port","protocol","newDoc","name","address","speciality","buffer","loading","errorMessage","account","manageraddress","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","state","add","accounts","eth","getAccounts","imagelink","path","methods","registerDoctor","send","from","err","message","pushRoute","componentDidMount","manager","call","render","onSubmit","value","captureFile"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Form, Icon, Message } from \"semantic-ui-react\";\r\nimport Layout from \"../components/Layout\";\r\nimport factory from \"../ethereum/factory\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Router } from \"../routes\";\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\n\r\nclass newDoc extends Component {\r\n  state = {\r\n    name: \"\",\r\n    address: \"\",\r\n    speciality: \"\",\r\n    buffer: null,\r\n    loading: false,\r\n    errorMessage: \"\",\r\n    account: \"\",\r\n    manageraddress: \"\",\r\n  };\r\n  async componentDidMount() {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const manageraddress = await factory.methods.manager().call();\r\n    this.setState({ account: accounts[0], manageraddress });\r\n  }\r\n  captureFile = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.buffer);\r\n    };\r\n  };\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({ loading: true, errorMessage: \"\" });\r\n    try {\r\n      const result = await ipfs.add(this.state.buffer);\r\n      const accounts = await web3.eth.getAccounts();\r\n      const imagelink = \"https://ipfs.infura.io/ipfs/\" + result.path;\r\n      await factory.methods\r\n        .registerDoctor(\r\n          this.state.address,\r\n          imagelink,\r\n          this.state.speciality,\r\n          this.state.name\r\n        )\r\n        .send({ from: accounts[0] });\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n      console.log(err);\r\n    }\r\n    this.setState({ loading: false });\r\n    Router.pushRoute(\"/doctors\");\r\n  };\r\n  render() {\r\n    if (this.state.account != this.state.manageraddress) {\r\n      return (\r\n        <Layout>\r\n          <h1>Sorry this page can only be accesed by the manager</h1>\r\n        </Layout>\r\n      );\r\n    }\r\n    return (\r\n      <Layout>\r\n        <h1>Register Doctor</h1>\r\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Input\r\n              fluid\r\n              label=\"name\"\r\n              placeholder=\"name\"\r\n              onChange={(event) => {\r\n                this.setState({ name: event.target.value });\r\n              }}\r\n              required\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              label=\"address\"\r\n              placeholder=\"address\"\r\n              onChange={(event) => {\r\n                this.setState({ address: event.target.value });\r\n              }}\r\n              required\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.TextArea\r\n            label=\"description about speciality\"\r\n            placeholder=\"Type here\"\r\n            onChange={(event) => {\r\n              this.setState({ speciality: event.target.value });\r\n            }}\r\n            required\r\n          />\r\n          <Form.Input\r\n            type=\"file\"\r\n            label=\"image\"\r\n            onChange={this.captureFile}\r\n            required\r\n          />\r\n          <Button primary type=\"submit\" loading={this.state.loading}>\r\n            <Icon name=\"add circle\" />\r\n            Register\r\n          </Button>\r\n          <Message error header=\"Oops!!\" content={this.state.errorMessage} />\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default newDoc;\r\n"]},"metadata":{},"sourceType":"module"}