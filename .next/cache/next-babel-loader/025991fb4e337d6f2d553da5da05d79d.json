{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport factory from \"../ethereum/factory\";\nimport Layout from \"../components/Layout\";\nimport web3 from \"../ethereum/web3\";\nimport { Component } from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\n\nclass doctor extends Component {\n  async renderDoctors() {\n    const items = [];\n    await web3.ethereum.enable();\n    const accounts = await web3.eth.getAccounts();\n    const docs = await factory.methods.getDoctors().call({\n      from: accounts[0]\n    });\n    console.log(docs);\n    items = docs.map(async address => {\n      const eachDoctor = await factory.methods.docs(docs[i]).call({\n        from: accounts[0]\n      });\n      return /*#__PURE__*/_jsxs(Card, {\n        children: [/*#__PURE__*/_jsx(Image, {\n          src: image,\n          wrapped: true,\n          ui: false\n        }), /*#__PURE__*/_jsxs(Card.Content, {\n          children: [/*#__PURE__*/_jsx(Card.Header, {\n            children: name\n          }), /*#__PURE__*/_jsx(Card.Description, {\n            children: speciality\n          })]\n        }), /*#__PURE__*/_jsx(Card.Content, {\n          children: /*#__PURE__*/_jsxs(Link, {\n            route: `/doctors/${address}`,\n            children: [/*#__PURE__*/_jsx(Icon, {\n              name: \"user\"\n            }), /*#__PURE__*/_jsx(\"a\", {\n              children: \"select\"\n            })]\n          })\n        })]\n      });\n    });\n\n    for (var i = 0; i < docs.length; i++) {\n      items.push(this.renderCard(eachDoctor.imageHash, eachDoctor.description, eachDoctor.speciality, eachDoctor.doc));\n    }\n\n    return items;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Select your doctors\"\n      }), /*#__PURE__*/_jsx(Card.Group, {\n        children: this.renderDoctors()\n      })]\n    });\n  }\n\n}\n\nexport default doctor;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/doctors.js"],"names":["factory","Layout","web3","Component","Card","Icon","Link","doctor","renderDoctors","items","ethereum","enable","accounts","eth","getAccounts","docs","methods","getDoctors","call","from","console","log","map","address","eachDoctor","i","image","name","speciality","length","push","renderCard","imageHash","description","doc","render"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,SAASC,IAAT,QAAqB,WAArB;;AAEA,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAC7B,QAAMK,aAAN,GAAsB;AACpB,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMP,IAAI,CAACQ,QAAL,CAAcC,MAAd,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACW,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMC,IAAI,GAAG,MAAMf,OAAO,CAACgB,OAAR,CAAgBC,UAAhB,GAA6BC,IAA7B,CAAkC;AAAEC,MAAAA,IAAI,EAAEP,QAAQ,CAAC,CAAD;AAAhB,KAAlC,CAAnB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEAN,IAAAA,KAAK,GAAGM,IAAI,CAACO,GAAL,CAAS,MAAOC,OAAP,IAAmB;AAClC,YAAMC,UAAU,GAAG,MAAMxB,OAAO,CAACgB,OAAR,CACtBD,IADsB,CACjBA,IAAI,CAACU,CAAD,CADa,EAEtBP,IAFsB,CAEjB;AAAEC,QAAAA,IAAI,EAAEP,QAAQ,CAAC,CAAD;AAAhB,OAFiB,CAAzB;AAIA,0BACE,MAAC,IAAD;AAAA,gCACE,KAAC,KAAD;AAAO,UAAA,GAAG,EAAEc,KAAZ;AAAmB,UAAA,OAAO,MAA1B;AAA2B,UAAA,EAAE,EAAE;AAA/B,UADF,eAEE,MAAC,IAAD,CAAM,OAAN;AAAA,kCACE,KAAC,IAAD,CAAM,MAAN;AAAA,sBAAcC;AAAd,YADF,eAEE,KAAC,IAAD,CAAM,WAAN;AAAA,sBAAmBC;AAAnB,YAFF;AAAA,UAFF,eAME,KAAC,IAAD,CAAM,OAAN;AAAA,iCACE,MAAC,IAAD;AAAM,YAAA,KAAK,EAAG,YAAWL,OAAQ,EAAjC;AAAA,oCACE,KAAC,IAAD;AAAM,cAAA,IAAI,EAAC;AAAX,cADF,eAEE;AAAA;AAAA,cAFF;AAAA;AADF,UANF;AAAA,QADF;AAeD,KApBO,CAAR;;AAqBA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACc,MAAzB,EAAiCJ,CAAC,EAAlC,EAAsC;AACpChB,MAAAA,KAAK,CAACqB,IAAN,CACE,KAAKC,UAAL,CACEP,UAAU,CAACQ,SADb,EAEER,UAAU,CAACS,WAFb,EAGET,UAAU,CAACI,UAHb,EAIEJ,UAAU,CAACU,GAJb,CADF;AAQD;;AACD,WAAOzB,KAAP;AACD;;AACD0B,EAAAA,MAAM,GAAG;AACP,wBACE,MAAC,MAAD;AAAA,8BACE;AAAA;AAAA,QADF,eAEE,KAAC,IAAD,CAAM,KAAN;AAAA,kBAAa,KAAK3B,aAAL;AAAb,QAFF;AAAA,MADF;AAMD;;AAhD4B;;AAmD/B,eAAeD,MAAf","sourcesContent":["import factory from \"../ethereum/factory\";\r\nimport Layout from \"../components/Layout\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Component } from \"react\";\r\nimport { Card, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"../routes\";\r\n\r\nclass doctor extends Component {\r\n  async renderDoctors() {\r\n    const items = [];\r\n    await web3.ethereum.enable();\r\n    const accounts = await web3.eth.getAccounts();\r\n    const docs = await factory.methods.getDoctors().call({ from: accounts[0] });\r\n    console.log(docs);\r\n\r\n    items = docs.map(async (address) => {\r\n      const eachDoctor = await factory.methods\r\n        .docs(docs[i])\r\n        .call({ from: accounts[0] });\r\n\r\n      return (\r\n        <Card>\r\n          <Image src={image} wrapped ui={false} />\r\n          <Card.Content>\r\n            <Card.Header>{name}</Card.Header>\r\n            <Card.Description>{speciality}</Card.Description>\r\n          </Card.Content>\r\n          <Card.Content>\r\n            <Link route={`/doctors/${address}`}>\r\n              <Icon name=\"user\" />\r\n              <a>select</a>\r\n            </Link>\r\n          </Card.Content>\r\n        </Card>\r\n      );\r\n    });\r\n    for (var i = 0; i < docs.length; i++) {\r\n      items.push(\r\n        this.renderCard(\r\n          eachDoctor.imageHash,\r\n          eachDoctor.description,\r\n          eachDoctor.speciality,\r\n          eachDoctor.doc\r\n        )\r\n      );\r\n    }\r\n    return items;\r\n  }\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>Select your doctors</h3>\r\n        <Card.Group>{this.renderDoctors()}</Card.Group>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default doctor;\r\n"]},"metadata":{},"sourceType":"module"}