{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport factory from \"../ethereum/factory\";\nimport Layout from \"../components/Layout\";\nimport web3 from \"../ethereum/web3\";\nimport { Component } from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\n\nvar doctor = /*#__PURE__*/function (_Component) {\n  _inherits(doctor, _Component);\n\n  var _super = _createSuper(doctor);\n\n  function doctor() {\n    _classCallCheck(this, doctor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(doctor, [{\n    key: \"renderDoctors\",\n    value: function () {\n      var _renderDoctors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var items, accounts, docs, i;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                items = [];\n                _context2.next = 3;\n                return web3.ethereum.enable();\n\n              case 3:\n                _context2.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context2.sent;\n                _context2.next = 8;\n                return factory.methods.getDoctors().call({\n                  from: accounts[0]\n                });\n\n              case 8:\n                docs = _context2.sent;\n                console.log(docs);\n                items = (_readOnlyError(\"items\"), docs.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n                    var eachDoctor;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return factory.methods.docs(docs[i]).call({\n                              from: accounts[0]\n                            });\n\n                          case 2:\n                            eachDoctor = _context.sent;\n                            return _context.abrupt(\"return\", /*#__PURE__*/_jsxs(Card, {\n                              children: [/*#__PURE__*/_jsx(Image, {\n                                src: image,\n                                wrapped: true,\n                                ui: false\n                              }), /*#__PURE__*/_jsxs(Card.Content, {\n                                children: [/*#__PURE__*/_jsx(Card.Header, {\n                                  children: name\n                                }), /*#__PURE__*/_jsx(Card.Description, {\n                                  children: speciality\n                                })]\n                              }), /*#__PURE__*/_jsx(Card.Content, {\n                                children: /*#__PURE__*/_jsxs(Link, {\n                                  route: \"/doctors/\".concat(address),\n                                  children: [/*#__PURE__*/_jsx(Icon, {\n                                    name: \"user\"\n                                  }), /*#__PURE__*/_jsx(\"a\", {\n                                    children: \"select\"\n                                  })]\n                                })\n                              })]\n                            }));\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n                for (i = 0; i < docs.length; i++) {\n                  items.push(this.renderCard(eachDoctor.imageHash, eachDoctor.description, eachDoctor.speciality, eachDoctor.doc));\n                }\n\n                return _context2.abrupt(\"return\", items);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function renderDoctors() {\n        return _renderDoctors.apply(this, arguments);\n      }\n\n      return renderDoctors;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxs(Layout, {\n        children: [/*#__PURE__*/_jsx(\"h3\", {\n          children: \"Select your doctors\"\n        }), /*#__PURE__*/_jsx(Card.Group, {\n          children: this.renderDoctors()\n        })]\n      });\n    }\n  }]);\n\n  return doctor;\n}(Component);\n\nexport default doctor;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/doctors.js"],"names":["factory","Layout","web3","Component","Card","Icon","Link","doctor","items","ethereum","enable","eth","getAccounts","accounts","methods","getDoctors","call","from","docs","console","log","map","address","i","eachDoctor","image","name","speciality","length","push","renderCard","imageHash","description","doc","renderDoctors"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,SAASC,IAAT,QAAqB,WAArB;;IAEMC,M;;;;;;;;;;;;;;;;;;;;AAEIC,gBAAAA,K,GAAQ,E;;uBACRN,IAAI,CAACO,QAAL,CAAcC,MAAd,E;;;;uBACiBR,IAAI,CAACS,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;;uBACab,OAAO,CAACc,OAAR,CAAgBC,UAAhB,GAA6BC,IAA7B,CAAkC;AAAEC,kBAAAA,IAAI,EAAEJ,QAAQ,CAAC,CAAD;AAAhB,iBAAlC,C;;;AAAbK,gBAAAA,I;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEAV,gBAAAA,KAAK,6BAAGU,IAAI,CAACG,GAAL;AAAA,sFAAS,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACUtB,OAAO,CAACc,OAAR,CACtBI,IADsB,CACjBA,IAAI,CAACK,CAAD,CADa,EAEtBP,IAFsB,CAEjB;AAAEC,8BAAAA,IAAI,EAAEJ,QAAQ,CAAC,CAAD;AAAhB,6BAFiB,CADV;;AAAA;AACTW,4BAAAA,UADS;AAAA,0EAMb,MAAC,IAAD;AAAA,sDACE,KAAC,KAAD;AAAO,gCAAA,GAAG,EAAEC,KAAZ;AAAmB,gCAAA,OAAO,MAA1B;AAA2B,gCAAA,EAAE,EAAE;AAA/B,gCADF,eAEE,MAAC,IAAD,CAAM,OAAN;AAAA,wDACE,KAAC,IAAD,CAAM,MAAN;AAAA,4CAAcC;AAAd,kCADF,eAEE,KAAC,IAAD,CAAM,WAAN;AAAA,4CAAmBC;AAAnB,kCAFF;AAAA,gCAFF,eAME,KAAC,IAAD,CAAM,OAAN;AAAA,uDACE,MAAC,IAAD;AAAM,kCAAA,KAAK,qBAAcL,OAAd,CAAX;AAAA,0DACE,KAAC,IAAD;AAAM,oCAAA,IAAI,EAAC;AAAX,oCADF,eAEE;AAAA;AAAA,oCAFF;AAAA;AADF,gCANF;AAAA,8BANa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAT;;AAAA;AAAA;AAAA;AAAA,oBAAH,CAAL;;AAqBA,qBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACU,MAAzB,EAAiCL,CAAC,EAAlC,EAAsC;AACpCf,kBAAAA,KAAK,CAACqB,IAAN,CACE,KAAKC,UAAL,CACEN,UAAU,CAACO,SADb,EAEEP,UAAU,CAACQ,WAFb,EAGER,UAAU,CAACG,UAHb,EAIEH,UAAU,CAACS,GAJb,CADF;AAQD;;kDACMzB,K;;;;;;;;;;;;;;;;;;6BAEA;AACP,0BACE,MAAC,MAAD;AAAA,gCACE;AAAA;AAAA,UADF,eAEE,KAAC,IAAD,CAAM,KAAN;AAAA,oBAAa,KAAK0B,aAAL;AAAb,UAFF;AAAA,QADF;AAMD;;;;EAhDkB/B,S;;AAmDrB,eAAeI,MAAf","sourcesContent":["import factory from \"../ethereum/factory\";\r\nimport Layout from \"../components/Layout\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Component } from \"react\";\r\nimport { Card, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"../routes\";\r\n\r\nclass doctor extends Component {\r\n  async renderDoctors() {\r\n    const items = [];\r\n    await web3.ethereum.enable();\r\n    const accounts = await web3.eth.getAccounts();\r\n    const docs = await factory.methods.getDoctors().call({ from: accounts[0] });\r\n    console.log(docs);\r\n\r\n    items = docs.map(async (address) => {\r\n      const eachDoctor = await factory.methods\r\n        .docs(docs[i])\r\n        .call({ from: accounts[0] });\r\n\r\n      return (\r\n        <Card>\r\n          <Image src={image} wrapped ui={false} />\r\n          <Card.Content>\r\n            <Card.Header>{name}</Card.Header>\r\n            <Card.Description>{speciality}</Card.Description>\r\n          </Card.Content>\r\n          <Card.Content>\r\n            <Link route={`/doctors/${address}`}>\r\n              <Icon name=\"user\" />\r\n              <a>select</a>\r\n            </Link>\r\n          </Card.Content>\r\n        </Card>\r\n      );\r\n    });\r\n    for (var i = 0; i < docs.length; i++) {\r\n      items.push(\r\n        this.renderCard(\r\n          eachDoctor.imageHash,\r\n          eachDoctor.description,\r\n          eachDoctor.speciality,\r\n          eachDoctor.doc\r\n        )\r\n      );\r\n    }\r\n    return items;\r\n  }\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h3>Select your doctors</h3>\r\n        <Card.Group>{this.renderDoctors()}</Card.Group>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default doctor;\r\n"]},"metadata":{},"sourceType":"module"}