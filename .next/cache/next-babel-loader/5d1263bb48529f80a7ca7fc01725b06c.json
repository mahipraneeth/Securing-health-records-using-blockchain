{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Card } from \"semantic-ui-react\";\nimport factory from \"../ethereum/factory\";\nimport Layout from \"../components/Layout\";\nimport web3 from \"../ethereum/web3\";\nimport record from \"../ethereum/record\";\n\nclass recordIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: []\n    });\n  }\n\n  static async getInitialProps() {\n    const records = await factory.methods.getDeployedRecords().call();\n    return {\n      records\n    };\n  }\n\n  async componentDidMount() {\n    const accounts = await web3.eth.getAccounts();\n    const items = [];\n\n    for (var i = 0; i < this.props.records; i++) {\n      const recordInstance = record(this.props.records[i]);\n      const eachRecord = await recordInstance.methods.getNameandAddress().call();\n      items.push({\n        image: eachRecord[1],\n        header: eachRecord[0],\n        extra: /*#__PURE__*/_jsx(Link, {\n          route: `/Records/${this.props.records[i]}`,\n          children: /*#__PURE__*/_jsxs(\"a\", {\n            children: [/*#__PURE__*/_jsx(Icon, {\n              name: \"user\"\n            }), \"select\"]\n          })\n        })\n      });\n    }\n\n    this.setState({});\n  }\n\n  renderRecords() {\n    const items = this.props.records.map(address => {});\n    return /*#__PURE__*/_jsx(Card.Group, {\n      items: items,\n      itemsPerRow: 6\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        content: \"Create record\",\n        floated: \"right\",\n        icon: \"add circle\",\n        primary: true\n      }), this.renderRecords()]\n    });\n  }\n\n}\n\nexport default recordIndex;","map":{"version":3,"sources":["F:/Securing health records using blockchain/pages/index.js"],"names":["React","Component","Button","Card","factory","Layout","web3","record","recordIndex","items","getInitialProps","records","methods","getDeployedRecords","call","componentDidMount","accounts","eth","getAccounts","i","props","recordInstance","eachRecord","getNameandAddress","push","image","header","extra","setState","renderRecords","map","address","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AACA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCAC1B;AACNQ,MAAAA,KAAK,EAAE;AADD,KAD0B;AAAA;;AAIlC,eAAaC,eAAb,GAA+B;AAC7B,UAAMC,OAAO,GAAG,MAAMP,OAAO,CAACQ,OAAR,CAAgBC,kBAAhB,GAAqCC,IAArC,EAAtB;AACA,WAAO;AAAEH,MAAAA;AAAF,KAAP;AACD;;AACD,QAAMI,iBAAN,GAA0B;AACxB,UAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACW,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMT,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWT,OAA/B,EAAwCQ,CAAC,EAAzC,EAA6C;AAC3C,YAAME,cAAc,GAAGd,MAAM,CAAC,KAAKa,KAAL,CAAWT,OAAX,CAAmBQ,CAAnB,CAAD,CAA7B;AACA,YAAMG,UAAU,GAAG,MAAMD,cAAc,CAACT,OAAf,CACtBW,iBADsB,GAEtBT,IAFsB,EAAzB;AAGAL,MAAAA,KAAK,CAACe,IAAN,CAAW;AACTC,QAAAA,KAAK,EAAEH,UAAU,CAAC,CAAD,CADR;AAETI,QAAAA,MAAM,EAAEJ,UAAU,CAAC,CAAD,CAFT;AAGTK,QAAAA,KAAK,eACH,KAAC,IAAD;AAAM,UAAA,KAAK,EAAG,YAAW,KAAKP,KAAL,CAAWT,OAAX,CAAmBQ,CAAnB,CAAsB,EAA/C;AAAA,iCACE;AAAA,oCACE,KAAC,IAAD;AAAM,cAAA,IAAI,EAAC;AAAX,cADF;AAAA;AADF;AAJO,OAAX;AAYD;;AACD,SAAKS,QAAL,CAAc,EAAd;AACD;;AACDC,EAAAA,aAAa,GAAG;AACd,UAAMpB,KAAK,GAAG,KAAKW,KAAL,CAAWT,OAAX,CAAmBmB,GAAnB,CAAwBC,OAAD,IAAa,CAAE,CAAtC,CAAd;AAEA,wBAAO,KAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEtB,KAAnB;AAA0B,MAAA,WAAW,EAAE;AAAvC,MAAP;AACD;;AAEDuB,EAAAA,MAAM,GAAG;AACP,wBACE,MAAC,MAAD;AAAA,8BACE,KAAC,MAAD;AACE,QAAA,OAAO,EAAC,eADV;AAEE,QAAA,OAAO,EAAC,OAFV;AAGE,QAAA,IAAI,EAAC,YAHP;AAIE,QAAA,OAAO;AAJT,QADF,EAOG,KAAKH,aAAL,EAPH;AAAA,MADF;AAWD;;AAjDiC;;AAoDpC,eAAerB,WAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Card } from \"semantic-ui-react\";\r\nimport factory from \"../ethereum/factory\";\r\nimport Layout from \"../components/Layout\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport record from \"../ethereum/record\";\r\nclass recordIndex extends Component {\r\n  state = {\r\n    items: [],\r\n  };\r\n  static async getInitialProps() {\r\n    const records = await factory.methods.getDeployedRecords().call();\r\n    return { records };\r\n  }\r\n  async componentDidMount() {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const items = [];\r\n    for (var i = 0; i < this.props.records; i++) {\r\n      const recordInstance = record(this.props.records[i]);\r\n      const eachRecord = await recordInstance.methods\r\n        .getNameandAddress()\r\n        .call();\r\n      items.push({\r\n        image: eachRecord[1],\r\n        header: eachRecord[0],\r\n        extra: (\r\n          <Link route={`/Records/${this.props.records[i]}`}>\r\n            <a>\r\n              <Icon name=\"user\" />\r\n              select\r\n            </a>\r\n          </Link>\r\n        ),\r\n      });\r\n    }\r\n    this.setState({});\r\n  }\r\n  renderRecords() {\r\n    const items = this.props.records.map((address) => {});\r\n\r\n    return <Card.Group items={items} itemsPerRow={6} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Button\r\n          content=\"Create record\"\r\n          floated=\"right\"\r\n          icon=\"add circle\"\r\n          primary\r\n        />\r\n        {this.renderRecords()}\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default recordIndex;\r\n"]},"metadata":{},"sourceType":"module"}